#! /usr/bin/env lfescript
;; -*- mode: lfe -*-
;;! -smp enable -sname factorial -mnesia debug verbose
(defun main
  (((list string))
    (try
      (let* ((n (list_to_integer string))
              (f (fac n)))
         (lfe_io:format '"factorial ~w = ~w\n" (list n f)))
      (catch
        ((tuple _ _ _) (usage)))))
    ((_) (usage)))

;;; Below are the function definitions giving us a tail-recursive factorial.
;;; For large numbers, the tail recursive verion uses less than 20% memory
;;; than the na√Øve factorial definition.
(defun fac (n)
  (fac (- n 1) n))

(defun fac
  ((1 n) n)
  ((i n)
    (fac (- i 1) (* n i))))

(defun usage ()
  (lfe_io:format '"Usage: ~s <integer>\n"
                 (list (escript:script_name))))
