#!/usr/bin/env bash

version=0.2.1

gitignore="{{GITIGNORE}}"
usage="{{USAGE}}"
rebarconfig="{{REBAR}}"
package="{{PACKAGE}}"
commonmk="{{COMMONMK}}"
otpmk="{{OTPMK}}"
yawsmk="{{YAWSMK}}"
libmakefile="{{LIBMAKEFILE}}"
svcmakefile="{{SVCMAKEFILE}}"
travisci="{{TRAVISCI}}"
readme="{{README}}"
scriptfile="{{SCRIPTFILE}}"
libappsrc="{{LIBAPPSRC}}"
libtestmodule="{{LIBTESTMODULE}}"
libmodule="{{LIBMODULE}}"
svcappsrc="{{SVCAPPSRC}}"
svctestmodule="{{SVCTESTMODULE}}"
svcapp="{{SVCAPP}}"
svcserver="{{SVCSERVER}}"
svcsup="{{SVCSUP}}"
yawsmakefile="{{YAWSMAKEFILE}}"
yawsrebar="{{YAWSREBAR}}"
yawsconf="{{YAWSCONF}}"
yawsmodule="{{YAWSMODULE}}"
yawsroutesmodule="{{YAWSROUTESMODULE}}"
yawscontentmodule="{{YAWSCONTENTMODULE}}"
yawsutilmodule="{{YAWSUTILMODULE}}"
yawsbootstrapcontentmodule="{{YAWSBOOTSTRAPCONTENTMODULE}}"
yawsbootstrapnavmodule="{{YAWSBOOTSTRAPNAVMODULE}}"
yawsbootstraproutesmodule="{{YAWSBOOTSTRAPROUTESMODULE}}"
yawsbootstrapcss="{{YAWSBOOTSTRAPCSS}}"
yawsbootstrapcssmin="{{YAWSBOOTSTRAPCSSMIN}}"
yawsbootstrapslatecss="{{YAWSBOOTSTRAPCSSSLATE}}"
yawsbootstrapslatecssmin="{{YAWSBOOTSTRAPCSSMINSLATE}}"
yawsbootstrapjs="{{YAWSBOOTSTRAPJS}}"
yawsbootstrapjsmin="{{YAWSBOOTSTRAPJSMIN}}"
yawsbootstrapfonteot="{{YAWSBOOTSTRAPFONTEOT}}"
yawsbootstrapfontsvg="{{YAWSBOOTSTRAPFONTSVG}}"
yawsbootstrapfontttf="{{YAWSBOOTSTRAPFONTTTF}}"
yawsbootstrapfontwoff="{{YAWSBOOTSTRAPFONTWOFF}}"

decode () {
    os=`uname`
    case $os in
        Darwin)
            base64 -D
            ;;
        *)
            base64 -d
            ;;
    esac
}

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | decode | sed \
        -e "s#{{SCRIPT}}#$script#g" \
        -e "s#{{FULLPATH}}#$fullpath#g" \
        -e "s#{{VERSION}}#$version#g"
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-subcommand-error () {
    local command=$1
    local subcommand=$2
    error "Unknown subcommand for '$command': '$subcommand'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

create-dirs () {
    local project=$1
    mkdir -p $project/{src,test/unit,test/integration,test/system}
}

create-yaws-dirs () {
    local project=$1
    mkdir -p $project/{www,etc,logs}
}

create-yaws-bootstrap-dirs () {
    local project=$1
    mkdir -p $project/{www/css,www/images,www/js,www/icons,www/fonts}
}

add-git-files () {
    git init && git add * .gitignore .travis.yml
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    if [ "$pattern" = "" ]; then
        pattern="{{IGNORE}}"
        project="{{IGNORE}}"
    fi
    echo $data | decode | LC_CTYPE=C LANG=C sed \
        "s#$pattern#$project#g" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$commonmk" $project/common.mk {{PROJECT}} $project
    create-file "$travisci" $project/.travis.yml {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$package" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
    create-file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    create-file "$otpmk" $project/otp.mk {{PROJECT}} $project
    create-file "$svcmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$svctestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
    create-file "$svcapp" \
        $project/src/${project}-app.lfe {{PROJECT}} $project
    create-file "$svcserver" \
        $project/src/${project}-server.lfe {{PROJECT}} $project
    create-file "$svcsup" \
        $project/src/${project}-sup.lfe {{PROJECT}} $project
}

create-yaws-files () {
    local project=$1
    create-file "$yawsmk" $project/yaws.mk {{PROJECT}} $project
    create-file "$yawsmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$yawsrebar" $project/rebar.config
    create-file "$yawsconf" $project/etc/yaws.conf {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$yawsmodule" $project/src/${project}.lfe {{PROJECT}} $project
    create-file "$yawsroutesmodule" \
        $project/src/${project}-routes.lfe {{PROJECT}} $project
    create-file "$yawscontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create-file "$yawsutilmodule" \
        $project/src/${project}-util.lfe {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
}

create-yaws-bootstrap-files () {
    local project=$1
    create-file "$yawsbootstrapcontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create-file "$yawsbootstrapnavmodule" \
        $project/src/${project}-nav.lfe {{PROJECT}} $project
    create-file "$yawsbootstraproutesmodule" \
        $project/src/${project}-routes.lfe {{PROJECT}} $project
    create-file "$yawsbootstrapcss" $project/www/css/bootstrap.css
    create-file "$yawsbootstrapcssmin" $project/www/css/bootstrap-min.css
    create-file "$yawsbootstrapslatecss" $project/www/css/bootstrap-slate.css
    create-file "$yawsbootstrapslatecssmin" \
        $project/www/css/bootstrap-slate-min.css
    create-file "$yawsbootstrapjs" $project/www/js/bootstrap.js
    create-file "$yawsbootstrapcssmin" $project/www/css/bootstrap-min.css
    create-file "$yawsbootstrapjs" $project/www/js/bootstrap.js
    create-file "$yawsbootstrapjsmin" $project/www/js/bootstrap-min.js
    create-file "$yawsbootstrapfonteot" \
        $project/www/fonts/glyphicons-halflings-regular.eot
    create-file "$yawsbootstrapfontsvg" \
        $project/www/fonts/glyphicons-halflings-regular.svg
    create-file "$yawsbootstrapfontttf" \
        $project/www/fonts/glyphicons-halflings-regular.ttf
    create-file "$yawsbootstrapfontwoff" \
        $project/www/fonts/glyphicons-halflings-regular.woff
}

post-create () {
    local project=$1
    cd $project && add-git-files && mkdir -p deps && make check-all-with-deps
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    post-create $project
}

setup-service-project () {
    echo "Setting up starter OTP service project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-service-files $project
    post-create $project
}

setup-e2-service-project () {
    #echo "Setting up starter e2 service project ..."
    local project=$1
    not-implemented-error
}

setup-yaws-project () {
    echo "Setting up default starter YAWS project ..."
    local project=$1
    create-dirs $project
    create-yaws-dirs $project
    create-project-files $project
    create-yaws-files $project
    post-create $project
}

setup-yaws-bootstrap-project () {
    echo "Setting up Bootstrap starter YAWS project ..."
    local project=$1
    create-dirs $project
    create-yaws-dirs $project
    create-yaws-bootstrap-dirs $project
    create-project-files $project
    create-yaws-files $project
    create-yaws-bootstrap-files $project
    post-create $project
}

create-new-yaws () {
    local command=$1
    local subcommand=$2
    local arg=$3
    case $subcommand in
        default)
            setup-yaws-project $arg
            ;;
        bootstrap)
            setup-yaws-bootstrap-project $arg
            ;;
        simple)
            setup-yaws-simple-project $arg
            ;;
        *)
            unknown-subcommand-error $command $subcommand
            ;;
    esac
}

create-new () {
    local context=$1
    local arg1=$2
    local arg2=$3
    case $context in
        script)
            setup-script-project $arg1
            ;;
        library)
            setup-library-project $arg1
            ;;
        service)
            setup-service-project $arg1
            ;;
        e2service)
            setup-e2-service-project $arg1
            ;;
        yaws)
            # check if arg2 is empty string; if so, assume no subcommand was
            # passed and use the default subcommand
            if [ "$arg2" == "" ]; then
                arg2=$arg1
                arg1="default"
            fi
            create-new-yaws $context $arg1 $arg2
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg1=$3
    local arg2=$4

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg1
            create-new $context $arg1 $arg2
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@
