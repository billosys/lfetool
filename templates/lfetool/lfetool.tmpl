#!/bin/bash

version=0.0.7

gitignore="{{GITIGNORE}}"
usage="{{USAGE}}"
rebarconfig="{{REBAR}}"
makefile="{{MAKEFILE}}"
readme="{{README}}"
scriptfile="{{SCRIPTFILE}}"
appsrc="{{APPSRC}}"
testmodule="{{TESTMODULE}}"
module="{{MODULE}}"

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | base64 -D
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

create-dirs () {
    local project=$1
    mkdir -p $project/src $project/test
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    if [ "$pattern" = "" ]; then
        pattern="{{NOOP}}"
        project="{{NOOP}}"
    fi
    echo $data | base64 -D | sed -e "s/$pattern/$project/" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$makefile" $project/Makefile {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$expm" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$appsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$testmodule" \
        $project/test/${project}_tests.lfe {{PROJECT}} $project
    create-file "$module" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    not-implemented-error
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-service-project () {
    #echo "Setting up library project skeleton ..."
    local project=$1
    not-implemented-error
}

setup-e2-service-project () {
    #echo "Setting up library project skeleton ..."
    local project=$1
    not-implemented-error
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    local context=$1
    local arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg=$3

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg
            create-new $context $arg
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@