#!/bin/bash

version=0.0.6

gitignore="{{GITIGNORE}}"
usage="{{USAGE}}"
rebarconfig="{{REBAR}}"
makefile="{{MAKEFILE}}"
readme="{{README}}"
scriptfile="{{SCRIPTFILE}}"
appsrc="{{APPSRC}}"
testmodule="{{TESTMODULE}}"
module="{{MODULE}}"

print-usage () {
    fullpath=$1
    version=$2
    script=`basename $1`
    echo "$usage" | base64 -D
}

error () {
    message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
  error 'Error: could not find `lfetool` on the $PATH'
}

create-dirs () {
    project=$1
    mkdir -p $project/src $project/test
}

create-project-files () {
    project=$1
    echo "$gitignore" | base64 -D > $project/.gitignore
    echo "$rebarconfig" | base64 -D > $project/rebar.config
    echo "$makefile" | base64 -D > $project/Makefile
    echo "$readme" | base64 -D > $project/README.rst
    echo "$expm" | base64 -D > $project/package.exs
}

create-library-files () {
    project=$1
    echo "$appsrc" | base64 -D > $project/src/$project.app.src
    echo "$testmodule" | base64 -D > $project/test/${project}_tests.lfe
    echo "$module" | base64 -D > $project/src/$project.lfe
}

create-service-files () {
    project=$1
    not-implemented-error
}

setup-script-project () {
    script=$1
    echo "$scriptfile" | base64 -D > $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-service-project () {
    #echo "Setting up library project skeleton ..."
    project=$!
    not-implemented-error
}

setup-e2-service-project () {
    #echo "Setting up library project skeleton ..."
    project=$!
    not-implemented-error
}

check-context () {
    context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    context=$1
    arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    directory=$1
    mode=$2
    path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

script=$0
command=$1
context=$2
arg=$3

case $command in
    -h)
        echo
        print-usage $script $version
        exit 0
        ;;
    -v)
        echo "$version"
        exit 0
        ;;
    help)
        $script -h
        ;;
    version)
        $script -v
        ;;
    install)
        check-context $context
        install-lfetool $context
        ;;
    new)
        check-context $context
        check-arg $arg
        create-new $context $arg
        exit 0
        ;;
    update)
        update-lfetool
        exit 0
        ;;
    *)
        unknown-command-error $command
        ;;
esac
