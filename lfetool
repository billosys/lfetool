#!/bin/bash

version=0.0.7

gitignore="ZGVwcwoqLnN1YmxpbWUtcHJvamVjdAoqLnN1YmxpbWUtd29ya3NwYWNlCiouYmVhbQouZXVuaXQKZGVidWctKgplYmluLyoKYmluL2V4cG0K"
usage="U2NyaXB0OiB7e1NDUklQVH19LCB2JHZlcnNpb24KVXNhZ2U6ICRmdWxscGF0aCA8Y29tbWFuZD4gPGNvbnRleHQ+IDxhcmc+IHwgPG9wdGlvbnM+CgpDdXJyZW50bHksICRzY3JpcHQgc3VwcG9ydHMgdGhlc2UgY29tbWFuZHM6CiAqIGhlbHAKICogdmVyc2lvbgogKiBpbnN0YWxsCiAqIHVwZGF0ZQogKiBuZXcKCkFkZGl0aW9uYWxseSwgaW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tbWFuZCwgeW91IG1heSBjaG9vc2UgdG8gcnVuIHRoZSBzY3JpcHQKd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgogLWggICAgZGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2UgYW5kIGV4aXQKIC12ICAgIGRpc3BsYXkgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBleGl0CgpUaGVzZSBjb21tYW5kcyBhcmUgZG9jdW1lbnRlZCBvbiB0aGUgcHJvamVjdCBwYWdlIGhlcmU6CiAgaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV0b29sCg=="
rebarconfig="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QiXX1dfS4Ke2xmZV9maXJzdF9maWxlcywgW119Lgp7ZGVwc19kaXIsIFsiZGVwcyJdfS4Ke3BsdWdpbnMsIFsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nXX0uCntldW5pdF9jb21waWxlX29wdHMsIFsKICAge3NyY19kaXJzLCBbInRlc3QiLCAic3JjIl19CiAgXX0uCntkZXBzLCBbCiAgIHtsZmUsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZS5naXQiLCAiZGV2ZWxvcCJ9fSwKICAgeydsZmUtdXRpbHMnLCAiLioiLCB7Z2l0LCAiaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmUtdXRpbHMuZ2l0In19LAogICB7bGZldW5pdCwgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vbGZlL2xmZXVuaXQuZ2l0In19LAogICB7J2xmZS1zYW1wbGUtcmViYXItcGx1Z2luJywKICAgICAiLioiLCB7Z2l0LCAiZ2l0Oi8vZ2l0aHViLmNvbS9vdWJpd2Fubi9sZmUtc2FtcGxlLXJlYmFyLXBsdWdpbi5naXQifX0KICBdfS4="
makefile="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoTEZFX0RJUik6JChMRkVfVVRJTFNfRElSKTokKExGRVVOSVRfRElSKTouLwpTT1VSQ0VfRElSID0gLi9zcmMKT1VUX0RJUiA9IC4vZWJpbgpURVNUX0RJUiA9IC4vdGVzdApURVNUX09VVF9ESVIgPSAuLy5ldW5pdApGSU5JU0ggPSAtcnVuIGluaXQgc3RvcCAtbm9zaGVsbAoKZ2V0LXZlcnNpb246CglAZWNobwoJQGVjaG8gIkdldHRpbmcgdmVyc2lvbiBpbmZvIC4uLiIKCUBlY2hvCglAZWNobyAtbiBhcHAuc3JjOiAnJwoJQGVybCAtZXZhbCAnaW86Zm9ybWF0KCJ+cH5uIiwgWyBcCgkJcHJvcGxpc3RzOmdldF92YWx1ZSh2c24sZWxlbWVudCgzLGVsZW1lbnQoMixoZChlbGVtZW50KDMsIFwKCQllcmxfZXZhbDpleHBycyhlbGVtZW50KDIsIGVybF9wYXJzZTpwYXJzZV9leHBycyhlbGVtZW50KDIsIFwKCQllcmxfc2NhbjpzdHJpbmcoIkRhdGEgPSAiICsrIGJpbmFyeV90b19saXN0KGVsZW1lbnQoMiwgXAoJCWZpbGU6cmVhZF9maWxlKCJzcmMvJChMSUIpLmFwcC5zcmMiKSkpKSkpKSwgW10pKSkpKSldKScgXAoJCSQoRklOSVNIKQoJQGVjaG8gLW4gcGFja2FnZS5leHM6ICcnCglAZ3JlcCB2ZXJzaW9uIHBhY2thZ2UuZXhzIHxhd2sgJ3twcmludCAkJDJ9J3xzZWQgLWUgJ3MvLC8vZycKCiMgTm90ZSB0aGF0IHRoaXMgbWFrZSB0YXJnZXQgZXhwZWN0cyB0byBiZSB1c2VkIGxpa2Ugc286CiMgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgZ2V0LWluc3RhbGwtZGlyCiMKIyBXaGljaCB3b3VsZCBnaXZlIHRoZSBmb2xsb3dpbmcgcmVzdWx0OgojICAgc29tZS9wYXRoLyRwcm9qZWN0LTEuMC4wCiMKZ2V0LWluc3RhbGwtZGlyOgoJQGVjaG8gJChFUkxfTElCKS8kKFBST0pFQ1QpLSQoc2hlbGwgbWFrZSBnZXQtdmVyc2lvbikKCiQoQklOX0RJUik6Cglta2RpciAtcCAkKEJJTl9ESVIpCgokKEVYUE0pOiAkKEJJTl9ESVIpCgljdXJsIC1vICQoRVhQTSkgaHR0cDovL2V4cG0uY28vX19kb3dubG9hZF9fL2V4cG0KCWNobW9kICt4ICQoRVhQTSkKCmdldC1kZXBzOgoJcmViYXIgZ2V0LWRlcHMKCWZvciBESVIgaW4gJCh3aWxkY2FyZCAkKERFUFMpLyopOyBcCglkbyBjZCAkJERJUjsgZWNobyAiVXBkYXRpbmcgJCRESVIgLi4uIjsgXAoJZ2l0IHB1bGw7IGNkIC0gPiAvZGV2L251bGw7IGRvbmUKCmNsZWFuLWViaW46CglybSAtZiAkKE9VVF9ESVIpLyouYmVhbQoKY2xlYW4tZXVuaXQ6CglybSAtcmYgJChURVNUX09VVF9ESVIpCgpjb21waWxlOiBnZXQtZGVwcyBjbGVhbi1lYmluCglyZWJhciBjb21waWxlCgpjb21waWxlLW5vLWRlcHM6IGNsZWFuLWViaW4KCXJlYmFyIGNvbXBpbGUgc2tpcF9kZXBzPXRydWUKCmNvbXBpbGUtdGVzdHM6IGNsZWFuLWV1bml0Cglta2RpciAtcCAkKFRFU1RfT1VUX0RJUikKCUVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFQykgLW8gJChURVNUX09VVF9ESVIpICQoVEVTVF9ESVIpLypfdGVzdHMubGZlCgktRVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKE9VVF9ESVIpICQoVEVTVF9ESVIpL3Rlc3RpbmctKi5sZmUKCnNoZWxsOiBjb21waWxlCgljbGVhcgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtcGEgJChURVNUX09VVF9ESVIpCgpzaGVsbC1uby1kZXBzOiBjb21waWxlLW5vLWRlcHMKCWNsZWFyCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkUpIC1wYSAkKFRFU1RfT1VUX0RJUikKCmNsZWFuOiBjbGVhbi1lYmluIGNsZWFuLWV1bml0CglyZWJhciBjbGVhbgoKY2hlY2s6IGNvbXBpbGUgY29tcGlsZS10ZXN0cwoJQGNsZWFyOwoJQHJlYmFyIGV1bml0IHZlcmJvc2U9MSBza2lwX2RlcHM9dHJ1ZQoKY2hlY2stbm8tZGVwczogY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMKCUBjbGVhcjsKCUByZWJhciBldW5pdCB2ZXJib3NlPTEgc2tpcF9kZXBzPXRydWUKCnB1c2gtYWxsOgoJZ2l0IHB1c2ggLS1hbGwKCWdpdCBwdXNoIHVwc3RyZWFtIC0tYWxsCglnaXQgcHVzaCAtLXRhZ3MKCWdpdCBwdXNoIHVwc3RyZWFtIC0tdGFncwoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgaW5zdGFsbAojCmluc3RhbGw6IElOU1RBTExESVI9JChzaGVsbCBtYWtlIGdldC1pbnN0YWxsLWRpcikKaW5zdGFsbDogY29tcGlsZQoJaWYgWyAiJCRFUkxfTElCIiAhPSAiIiBdOyBcCgl0aGVuIG1rZGlyIC1wICQoSU5TVEFMTERJUikvJChFQklOKTsgXAoJCW1rZGlyIC1wICQoSU5TVEFMTERJUikvJChTUkMpOyBcCgkJY3AgLXBQUiAkKEVCSU4pICQoSU5TVEFMTERJUik7IFwKCQljcCAtcFBSICQoU1JDKSAkKElOU1RBTExESVIpOyBcCgllbHNlIFwKCQllY2hvICJFUlJPUjogTm8gJ0VSTF9MSUInIHZhbHVlIGlzIHNldCBpbiB0aGUgZW52LiIgXAoJCSYmIGV4aXQgMTsgXAoJZmkKCnVwbG9hZDogJChFWFBNKSBnZXQtdmVyc2lvbgoJQGVjaG8gIlBhY2thZ2UgZmlsZToiCglAZWNobwoJQGNhdCBwYWNrYWdlLmV4cwoJQGVjaG8KCUBlY2hvICJDb250aW51ZSB3aXRoIHVwbG9hZD8gIgoJQHJlYWQKCSQoRVhQTSkgcHVibGlzaAoK"
readme="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoTEZFX0RJUik6JChMRkVfVVRJTFNfRElSKTokKExGRVVOSVRfRElSKTouLwpTT1VSQ0VfRElSID0gLi9zcmMKT1VUX0RJUiA9IC4vZWJpbgpURVNUX0RJUiA9IC4vdGVzdApURVNUX09VVF9ESVIgPSAuLy5ldW5pdApGSU5JU0ggPSAtcnVuIGluaXQgc3RvcCAtbm9zaGVsbAoKZ2V0LXZlcnNpb246CglAZWNobwoJQGVjaG8gIkdldHRpbmcgdmVyc2lvbiBpbmZvIC4uLiIKCUBlY2hvCglAZWNobyAtbiBhcHAuc3JjOiAnJwoJQGVybCAtZXZhbCAnaW86Zm9ybWF0KCJ+cH5uIiwgWyBcCgkJcHJvcGxpc3RzOmdldF92YWx1ZSh2c24sZWxlbWVudCgzLGVsZW1lbnQoMixoZChlbGVtZW50KDMsIFwKCQllcmxfZXZhbDpleHBycyhlbGVtZW50KDIsIGVybF9wYXJzZTpwYXJzZV9leHBycyhlbGVtZW50KDIsIFwKCQllcmxfc2NhbjpzdHJpbmcoIkRhdGEgPSAiICsrIGJpbmFyeV90b19saXN0KGVsZW1lbnQoMiwgXAoJCWZpbGU6cmVhZF9maWxlKCJzcmMvJChMSUIpLmFwcC5zcmMiKSkpKSkpKSwgW10pKSkpKSldKScgXAoJCSQoRklOSVNIKQoJQGVjaG8gLW4gcGFja2FnZS5leHM6ICcnCglAZ3JlcCB2ZXJzaW9uIHBhY2thZ2UuZXhzIHxhd2sgJ3twcmludCAkJDJ9J3xzZWQgLWUgJ3MvLC8vZycKCiMgTm90ZSB0aGF0IHRoaXMgbWFrZSB0YXJnZXQgZXhwZWN0cyB0byBiZSB1c2VkIGxpa2Ugc286CiMgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgZ2V0LWluc3RhbGwtZGlyCiMKIyBXaGljaCB3b3VsZCBnaXZlIHRoZSBmb2xsb3dpbmcgcmVzdWx0OgojICAgc29tZS9wYXRoLyRwcm9qZWN0LTEuMC4wCiMKZ2V0LWluc3RhbGwtZGlyOgoJQGVjaG8gJChFUkxfTElCKS8kKFBST0pFQ1QpLSQoc2hlbGwgbWFrZSBnZXQtdmVyc2lvbikKCiQoQklOX0RJUik6Cglta2RpciAtcCAkKEJJTl9ESVIpCgokKEVYUE0pOiAkKEJJTl9ESVIpCgljdXJsIC1vICQoRVhQTSkgaHR0cDovL2V4cG0uY28vX19kb3dubG9hZF9fL2V4cG0KCWNobW9kICt4ICQoRVhQTSkKCmdldC1kZXBzOgoJcmViYXIgZ2V0LWRlcHMKCWZvciBESVIgaW4gJCh3aWxkY2FyZCAkKERFUFMpLyopOyBcCglkbyBjZCAkJERJUjsgZWNobyAiVXBkYXRpbmcgJCRESVIgLi4uIjsgXAoJZ2l0IHB1bGw7IGNkIC0gPiAvZGV2L251bGw7IGRvbmUKCmNsZWFuLWViaW46CglybSAtZiAkKE9VVF9ESVIpLyouYmVhbQoKY2xlYW4tZXVuaXQ6CglybSAtcmYgJChURVNUX09VVF9ESVIpCgpjb21waWxlOiBnZXQtZGVwcyBjbGVhbi1lYmluCglyZWJhciBjb21waWxlCgpjb21waWxlLW5vLWRlcHM6IGNsZWFuLWViaW4KCXJlYmFyIGNvbXBpbGUgc2tpcF9kZXBzPXRydWUKCmNvbXBpbGUtdGVzdHM6IGNsZWFuLWV1bml0Cglta2RpciAtcCAkKFRFU1RfT1VUX0RJUikKCUVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFQykgLW8gJChURVNUX09VVF9ESVIpICQoVEVTVF9ESVIpLypfdGVzdHMubGZlCgktRVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKE9VVF9ESVIpICQoVEVTVF9ESVIpL3Rlc3RpbmctKi5sZmUKCnNoZWxsOiBjb21waWxlCgljbGVhcgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtcGEgJChURVNUX09VVF9ESVIpCgpzaGVsbC1uby1kZXBzOiBjb21waWxlLW5vLWRlcHMKCWNsZWFyCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkUpIC1wYSAkKFRFU1RfT1VUX0RJUikKCmNsZWFuOiBjbGVhbi1lYmluIGNsZWFuLWV1bml0CglyZWJhciBjbGVhbgoKY2hlY2s6IGNvbXBpbGUgY29tcGlsZS10ZXN0cwoJQGNsZWFyOwoJQHJlYmFyIGV1bml0IHZlcmJvc2U9MSBza2lwX2RlcHM9dHJ1ZQoKY2hlY2stbm8tZGVwczogY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMKCUBjbGVhcjsKCUByZWJhciBldW5pdCB2ZXJib3NlPTEgc2tpcF9kZXBzPXRydWUKCnB1c2gtYWxsOgoJZ2l0IHB1c2ggLS1hbGwKCWdpdCBwdXNoIHVwc3RyZWFtIC0tYWxsCglnaXQgcHVzaCAtLXRhZ3MKCWdpdCBwdXNoIHVwc3RyZWFtIC0tdGFncwoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgaW5zdGFsbAojCmluc3RhbGw6IElOU1RBTExESVI9JChzaGVsbCBtYWtlIGdldC1pbnN0YWxsLWRpcikKaW5zdGFsbDogY29tcGlsZQoJaWYgWyAiJCRFUkxfTElCIiAhPSAiIiBdOyBcCgl0aGVuIG1rZGlyIC1wICQoSU5TVEFMTERJUikvJChFQklOKTsgXAoJCW1rZGlyIC1wICQoSU5TVEFMTERJUikvJChTUkMpOyBcCgkJY3AgLXBQUiAkKEVCSU4pICQoSU5TVEFMTERJUik7IFwKCQljcCAtcFBSICQoU1JDKSAkKElOU1RBTExESVIpOyBcCgllbHNlIFwKCQllY2hvICJFUlJPUjogTm8gJ0VSTF9MSUInIHZhbHVlIGlzIHNldCBpbiB0aGUgZW52LiIgXAoJCSYmIGV4aXQgMTsgXAoJZmkKCnVwbG9hZDogJChFWFBNKSBnZXQtdmVyc2lvbgoJQGVjaG8gIlBhY2thZ2UgZmlsZToiCglAZWNobwoJQGNhdCBwYWNrYWdlLmV4cwoJQGVjaG8KCUBlY2hvICJDb250aW51ZSB3aXRoIHVwbG9hZD8gIgoJQHJlYWQKCSQoRVhQTSkgcHVibGlzaAoK"
scriptfile="IyEgL3Vzci9iaW4vZW52IGxmZXNjcmlwdAo7OyAtKi0gbW9kZTogbGZlIC0qLQo7OyEgLXNtcCBlbmFibGUgLXNuYW1lIGZhY3RvcmlhbCAtbW5lc2lhIGRlYnVnIHZlcmJvc2UKKGRlZnVuIG1haW4KICAoKChsaXN0IHN0cmluZykpCiAgICAodHJ5CiAgICAgIChsZXQqICgobiAobGlzdF90b19pbnRlZ2VyIHN0cmluZykpCiAgICAgICAgICAgICAgKGYgKGZhYyBuKSkpCiAgICAgICAgICg6IGxmZV9pbyBmb3JtYXQgJyJmYWN0b3JpYWwgfncgPSB+d1xuIiAobGlzdCBuIGYpKSkKICAgICAgKGNhdGNoCiAgICAgICAgKCh0dXBsZSBfIF8gXykgKHVzYWdlKSkpKSkKICAgICgoXykgKHVzYWdlKSkpCgooZGVmdW4gZmFjCiAgKCgwKSAxKQogICgobikgKCogbiAoZmFjICgtIG4gMSkpKSkpCgooZGVmdW4gdXNhZ2UgKCkKICAobGV0ICgoc2NyaXB0LW5hbWUgKDogZXNjcmlwdCBzY3JpcHRfbmFtZSkpKQogICAgKDogbGZlX2lvIGZvcm1hdCAnInVzYWdlOiB+cyA8aW50ZWdlcj5cbiIgKGxpc3Qgc2NyaXB0LW5hbWUpKSkp"
libappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0nCiAgIF19LAoKICAlJSBBbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbmFtZXMgdGhlIGFwcGxpY2F0aW9uIHVzZXMuIFRoaXMgY2FuIGJlIGlnbm9yZWQuCiAge3JlZ2lzdGVyZWQsIFtdfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0u"
libtestmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fV90ZXN0cwogIChleHBvcnQgYWxsKQogIChpbXBvcnQKICAgIChmcm9tIGxmZXVuaXQtdXRpbAogICAgICAoY2hlY2stZmFpbGVkLWFzc2VydCAyKQogICAgICAoY2hlY2std3JvbmctYXNzZXJ0LWV4Y2VwdGlvbiAyKSkpKQoKKGluY2x1ZGUtbGliICJkZXBzL2xmZXVuaXQvaW5jbHVkZS9sZmV1bml0LW1hY3Jvcy5sZmUiKQoKCihkZWZ0ZXN0IG15LWFkZGVyCiAgKGlzLWVxdWFsIDQgKDoge3tQUk9KRUNUfX0gbXktYWRkZXIgMiAyKSkp"
libmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkp"

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | base64 -D
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
  error 'Error: could not find `lfetool` on the $PATH'
}

create-dirs () {
    local project=$1
    mkdir -p $project/src $project/test
}

create-file () {
  local data=$1
  local filename=$2
  local pattern=$3
  local project=$4
  if [ "$pattern" = "" ]; then
    pattern="{{NOOP}}"
    project="{{NOOP}}"
  fi
  echo $data | base64 -D | sed -e "s/$pattern/$project/" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$makefile" $project/Makefile {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$expm" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$testmodule" \
        $project/test/${project}_tests.lfe {{PROJECT}} $project
    create-file "$module" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    not-implemented-error
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-service-project () {
    #echo "Setting up library project skeleton ..."
    local project=$1
    not-implemented-error
}

setup-e2-service-project () {
    #echo "Setting up library project skeleton ..."
    local project=$1
    not-implemented-error
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    local context=$1
    local arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

run () {
  local script=$0
  local command=$1
  local context=$2
  local arg=$3

  case $command in
      -h)
          echo
          print-usage $script $version
          exit 0
          ;;
      -v)
          echo "$version"
          exit 0
          ;;
      help)
          $script -h
          ;;
      version)
          $script -v
          ;;
      install)
          check-context $context
          install-lfetool $context
          ;;
      new)
          check-context $context
          check-arg $arg
          create-new $context $arg
          exit 0
          ;;
      update)
          update-lfetool
          exit 0
          ;;
      *)
          unknown-command-error $command
          ;;
  esac
}

run $@
