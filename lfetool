#!/usr/bin/env bash

version=0.2.1

gitignore="ZGVwcwoqLnN1YmxpbWUtcHJvamVjdAoqLnN1YmxpbWUtd29ya3NwYWNlCiouYmVhbQouZXVuaXQKZGVidWctKgplYmluLyoKYmluL2V4cG0K"
usage="U2NyaXB0OiB7e1NDUklQVH19LCB2e3tWRVJTSU9OfX0KVXNhZ2U6IHt7RlVMTFBBVEh9fSA8Y29tbWFuZD4gPGNvbnRleHQ+IDxhcmc+IHwgPG9wdGlvbnM+CgpDdXJyZW50bHksIHt7U0NSSVBUfX0gc3VwcG9ydHMgdGhlc2UgY29tbWFuZHM6CiAqIGhlbHAKICogdmVyc2lvbgogKiBpbnN0YWxsCiAqIHVwZGF0ZQogKiBuZXcKCkFkZGl0aW9uYWxseSwgaW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tbWFuZCwgeW91IG1heSBjaG9vc2UgdG8gcnVuIHRoZSBzY3JpcHQKd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgogLWggICAgZGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2UgYW5kIGV4aXQKIC12ICAgIGRpc3BsYXkgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBleGl0CgpUaGVzZSBjb21tYW5kcyBhcmUgZG9jdW1lbnRlZCBvbiB0aGUgcHJvamVjdCBwYWdlIGhlcmU6CiAgaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV0b29sCg=="
rebarconfig="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QvdW5pdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXN0L2ludGVncmF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRlc3Qvc3lzdGVtIl19XX0uCntsZmVfZmlyc3RfZmlsZXMsIFtdfS4Ke2RlcHNfZGlyLCBbImRlcHMiXX0uCntwbHVnaW5zLCBbJ2xmZS1zYW1wbGUtcmViYXItcGx1Z2luJ119Lgp7ZXVuaXRfY29tcGlsZV9vcHRzLCBbCiAgIHtzcmNfZGlycywgWyJ0ZXN0L3VuaXQiLAogICAgICAgICAgICAgICAidGVzdC9pbnRlZ3JhdGlvbiIsCiAgICAgICAgICAgICAgICJ0ZXN0L3N5c3RlbSIsCiAgICAgICAgICAgICAgICJzcmMiXX0KICBdfS4Ke2RlcHMsIFsKICAge2xmZSwgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vcnZpcmRpbmcvbGZlLmdpdCIsICJkZXZlbG9wIn19LAogICB7J2xmZS11dGlscycsICIuKiIsIHtnaXQsICJodHRwczovL2dpdGh1Yi5jb20vbGZlL2xmZS11dGlscy5naXQiLCAibWFzdGVyIn19LAogICB7bGZldW5pdCwgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vbGZlL2xmZXVuaXQuZ2l0IiwgIm1hc3RlciJ9fSwKICAgeydsZmUtc2FtcGxlLXJlYmFyLXBsdWdpbicsCiAgICAgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vb3ViaXdhbm4vbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4uZ2l0IiwKICAgICAibWFzdGVyIn19CiAgXX0uCg=="
package="RXhwbS5QYWNrYWdlLm5ldygKICBuYW1lOiAie3tQUk9KRUNUfX0iLAogIGRlc2NyaXB0aW9uOiAie3tQUk9KRUNUfX0gREVTQ1JJUFRJT04iLAogIHZlcnNpb246ICIwLjAuMSIsCiAga2V5d29yZHM6IFsiTEZFIiwgIkxpc3AiLCAiTGlicmFyeSIsICJBUEkiXSwKICBtYWludGFpbmVyczogW1tuYW1lOiAiWU9VUiBOQU1FIiwgZW1haWw6ICJZT1VSQEVNQUlMLmNvbSJdXSwKICByZXBvc2l0b3JpZXM6IFtbZ2l0aHViOiAiWU9VUl9HSVRIVUJfTkFNRS97e1BST0pFQ1R9fV1dKQo="
commonmk="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKU09VUkNFX0RJUiA9IC4vc3JjCk9VVF9ESVIgPSAuL2ViaW4KVEVTVF9ESVIgPSAuL3Rlc3QKVEVTVF9PVVRfRElSID0gLi8uZXVuaXQKRklOSVNIID0gLXJ1biBpbml0IHN0b3AgLW5vc2hlbGwKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoc2hlbGwgZmluZCAkKERFUFMpIC1tYXhkZXB0aCAxIC1leGVjIGVjaG8gLW4gJ3t9OicgXDt8c2VkICdzLzokJC86Li8nKTokKFRFU1RfT1VUX0RJUikKCmdldC12ZXJzaW9uOgoJQGVjaG8KCUBlY2hvICJHZXR0aW5nIHZlcnNpb24gaW5mbyAuLi4iCglAZWNobwoJQGVjaG8gLW4gYXBwLnNyYzogJycKCUBlcmwgLWV2YWwgJ2lvOmZvcm1hdCgifnB+biIsIFsgXAoJCXByb3BsaXN0czpnZXRfdmFsdWUodnNuLGVsZW1lbnQoMyxlbGVtZW50KDIsaGQoZWxlbWVudCgzLCBcCgkJZXJsX2V2YWw6ZXhwcnMoZWxlbWVudCgyLCBlcmxfcGFyc2U6cGFyc2VfZXhwcnMoZWxlbWVudCgyLCBcCgkJZXJsX3NjYW46c3RyaW5nKCJEYXRhID0gIiArKyBiaW5hcnlfdG9fbGlzdChlbGVtZW50KDIsIFwKCQlmaWxlOnJlYWRfZmlsZSgic3JjLyQoTElCKS5hcHAuc3JjIikpKSkpKSksIFtdKSkpKSkpXSknIFwKCQkkKEZJTklTSCkKCUBlY2hvIC1uIHBhY2thZ2UuZXhzOiAnJwoJQGdyZXAgdmVyc2lvbiBwYWNrYWdlLmV4cyB8YXdrICd7cHJpbnQgJCQyfSd8c2VkIC1lICdzLywvL2cnCglAZWNobyAtbiBnaXQgdGFnczogJycKCUBlY2hvIGBnaXQgdGFnYAoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICQgRVJMX0xJQj1zb21lL3BhdGggbWFrZSBnZXQtaW5zdGFsbC1kaXIKIwojIFdoaWNoIHdvdWxkIGdpdmUgdGhlIGZvbGxvd2luZyByZXN1bHQ6CiMgICBzb21lL3BhdGgvJHByb2plY3QtMS4wLjAKIwpnZXQtaW5zdGFsbC1kaXI6CglAZWNobyAkKEVSTF9MSUIpLyQoUFJPSkVDVCktJChzaGVsbCBtYWtlIGdldC12ZXJzaW9uKQoKJChCSU5fRElSKToKCW1rZGlyIC1wICQoQklOX0RJUikKCiQoRVhQTSk6ICQoQklOX0RJUikKCWN1cmwgLW8gJChFWFBNKSBodHRwOi8vZXhwbS5jby9fX2Rvd25sb2FkX18vZXhwbQoJY2htb2QgK3ggJChFWFBNKQoKZ2V0LWRlcHM6CglAZWNobyAiR2V0dGluZyBkZXBlbmRlbmNpZXMgLi4uIgoJQHJlYmFyIGdldC1kZXBzCglAZm9yIERJUiBpbiAkKHdpbGRjYXJkICQoREVQUykvKik7IFwKCWRvIGNkICQkRElSOyBlY2hvICJVcGRhdGluZyAkJERJUiAuLi4iOyBcCglnaXQgcHVsbDsgY2QgLSA+IC9kZXYvbnVsbDsgZG9uZQoKY2xlYW4tZWJpbjoKCUBlY2hvICJDbGVhbmluZyBlYmluIGRpciAuLi4iCglAcm0gLWYgJChPVVRfRElSKS8qLmJlYW0KCmNsZWFuLWV1bml0OgoJQGVjaG8gIkNsZWFuaW5nIGV1bml0IGRpciAuLi4iCglAcm0gLXJmICQoVEVTVF9PVVRfRElSKQoKY29tcGlsZTogZ2V0LWRlcHMgY2xlYW4tZWJpbgoJQGVjaG8gIkNvbXBpbGluZyBwcm9qZWN0IGNvZGUgYW5kIGRlcGVuZGVuY2llcyAuLi4iCglAcmViYXIgY29tcGlsZQoKY29tcGlsZS1uby1kZXBzOiBjbGVhbi1lYmluCglAZWNobyAiQ29tcGlsaW5nIG9ubHkgcHJvamVjdCBjb2RlIC4uLiIKCUByZWJhciBjb21waWxlIHNraXBfZGVwcz10cnVlCgpjb21waWxlLXRlc3RzOiBjbGVhbi1ldW5pdAoJQGVjaG8gIkNvbXBpbGluZyB0ZXN0cyAuLi4iCglAbWtkaXIgLXAgJChURVNUX09VVF9ESVIpCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKFRFU1RfT1VUX0RJUikgJChURVNUX0RJUikvKi8qW18tXXRlc3RzLmxmZQoJQC1FUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRUMpIC1vICQoT1VUX0RJUikgJChURVNUX0RJUikvdGVzdGluZ1stX10qLmxmZQoKc2hlbGw6IGNvbXBpbGUKCUBjbGVhcgoJQGVjaG8gIlN0YXJ0aW5nIHNoZWxsIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgLXBhICQoVEVTVF9PVVRfRElSKQoKc2hlbGwtbm8tZGVwczogY29tcGlsZS1uby1kZXBzCglAY2xlYXIKCUBlY2hvICJTdGFydGluZyBzaGVsbCAuLi4iCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkUpIC1wYSAkKFRFU1RfT1VUX0RJUikKCmNsZWFuOiBjbGVhbi1lYmluIGNsZWFuLWV1bml0CglAcmViYXIgY2xlYW4KCmNoZWNrLXVuaXQtb25seToKCUBlY2hvCglAZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0tIgoJQGVjaG8gIlJ1bm5pbmcgdW5pdCB0ZXN0cyAuLi4iCglAZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0tIgoJQGVjaG8KCUBFUkxfTElCUz0kKEVSTF9MSUJTKSBlcmwgLXBhIC5ldW5pdCAtbm9zaGVsbCBcCgktZXZhbCAiZXVuaXQ6dGVzdCh7aW5wYXJhbGxlbCxbXAoJCWBscyAuZXVuaXQvdW5pdCp8IFwKCQlzZWQgLWUgJ3MvLmJlYW0vLycgLWUgJ3MvXi5ldW5pdFwvLy8nfCBcCgkJYXdrICd7cHJpbnQgIlx4MjciICQkMSAiXHgyNyJ9J3wgXAoJCXNlZCAnOmE7TjskIWJhO3MvXG4vIC9nJ2BdfSxbdmVyYm9zZV0pIiBcCgktcyBpbml0IHN0b3AKCmNoZWNrLWludGVncmF0aW9uLW9ubHk6CglAZWNobwoJQGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0iCglAZWNobyAiUnVubmluZyBpbnRlZ3JhdGlvbiB0ZXN0cyAuLi4iCglAZWNobyAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIKCUBlY2hvCglARVJMX0xJQlM9JChFUkxfTElCUykgZXJsIC1wYSAuZXVuaXQgLW5vc2hlbGwgXAoJLWV2YWwgImV1bml0OnRlc3Qoe2lucGFyYWxsZWwsW1wKCQlgbHMgLmV1bml0L2ludGVncmF0aW9uKnwgXAoJCXNlZCAtZSAncy8uYmVhbS8vJyAtZSAncy9eLmV1bml0XC8vLyd8IFwKCQlhd2sgJ3twcmludCAiXHgyNyIgJCQxICJceDI3In0nfCBcCgkJc2VkICc6YTtOOyQhYmE7cy9cbi8gL2cnYF19LFt2ZXJib3NlXSkiIFwKCS1zIGluaXQgc3RvcAoKY2hlY2stc3lzdGVtLW9ubHk6CglAZWNobwoJQGVjaG8gIi0tLS0tLS0tLS0tLS0tLS0tLS0tIgoJQGVjaG8gIlJ1bm5pbmcgc3lzdGVtIHRlc3RzIC4uLiIKCUBlY2hvICItLS0tLS0tLS0tLS0tLS0tLS0tLSIKCUBlY2hvCglARVJMX0xJQlM9JChFUkxfTElCUykgZXJsIC1wYSAuZXVuaXQgLW5vc2hlbGwgXAoJLWV2YWwgImV1bml0OnRlc3Qoe2lucGFyYWxsZWwsW1wKCQlgbHMgLmV1bml0L3N5c3RlbSp8IFwKCQlzZWQgLWUgJ3MvLmJlYW0vLycgLWUgJ3MvXi5ldW5pdFwvLy8nfCBcCgkJYXdrICd7cHJpbnQgIlx4MjciICQkMSAiXHgyNyJ9J3wgXAoJCXNlZCAnOmE7TjskIWJhO3MvXG4vIC9nJ2BdfSxbdmVyYm9zZV0pIiBcCgktcyBpbml0IHN0b3AKCmNoZWNrLXVuaXQtd2l0aC1kZXBzOiBjb21waWxlIGNvbXBpbGUtdGVzdHMgY2hlY2stdW5pdC1vbmx5CmNoZWNrLXVuaXQ6IGdldC1kZXBzIGNvbXBpbGUtbm8tZGVwcyBjb21waWxlLXRlc3RzIGNoZWNrLXVuaXQtb25seQpjaGVjay1pbnRlZ3JhdGlvbjogY29tcGlsZSBjb21waWxlLXRlc3RzIGNoZWNrLWludGVncmF0aW9uLW9ubHkKY2hlY2stc3lzdGVtOiBjb21waWxlIGNvbXBpbGUtdGVzdHMgY2hlY2stc3lzdGVtLW9ubHkKY2hlY2stYWxsLXdpdGgtZGVwczogY29tcGlsZSBjb21waWxlLXRlc3RzIGNoZWNrLXVuaXQtb25seSBcCgljaGVjay1pbnRlZ3JhdGlvbi1vbmx5IGNoZWNrLXN5c3RlbS1vbmx5CmNoZWNrLWFsbDogZ2V0LWRlcHMgY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMgY2hlY2stdW5pdC1vbmx5IFwKCWNoZWNrLWludGVncmF0aW9uLW9ubHkgY2hlY2stc3lzdGVtLW9ubHkKCiMgWFhYIGFsbCB0aGUgY3VzdG9tIHRlc3QgY2hlY2tlcnMgYWJvdmUgaGF2ZSBhbiBpc3N1ZSwgZGVzY3JpYmVkIGhlcmU6CiMgCWh0dHBzOi8vZ2l0aHViLmNvbS9sZmUvbGZldG9vbC9pc3N1ZXMvMTQKIyB1bnRpbCB0aGF0IGdldHMgZml4ZWQsIHVzZSB0aGUgdGFyZ2V0IGJlbG93IGZvciBUcmF2aXMgQ0kKY2hlY2s6IGNvbXBpbGUgY29tcGlsZS10ZXN0cwoJQHJlYmFyIGV1bml0IHZlcmJvc2U9MSBza2lwX2RlcHM9dHJ1ZQoKcHVzaC1hbGw6CglAZWNobyAiUHVzaW5nIGNvZGUgdG8gZ2l0aHViIC4uLiIKCWdpdCBwdXNoIC0tYWxsCglnaXQgcHVzaCB1cHN0cmVhbSAtLWFsbAoJZ2l0IHB1c2ggLS10YWdzCglnaXQgcHVzaCB1cHN0cmVhbSAtLXRhZ3MKCiMgTm90ZSB0aGF0IHRoaXMgbWFrZSB0YXJnZXQgZXhwZWN0cyB0byBiZSB1c2VkIGxpa2Ugc286CiMgICAgJCBFUkxfTElCPXNvbWUvcGF0aCBtYWtlIGluc3RhbGwKIwppbnN0YWxsOiBJTlNUQUxMRElSPSQoc2hlbGwgbWFrZSBnZXQtaW5zdGFsbC1kaXIpCmluc3RhbGw6IGNvbXBpbGUKCUBlY2hvICJJbnN0YWxsaW5nIHt7UFJPSkVDVH19IC4uLiIKCUBpZiBbICIkJEVSTF9MSUIiICE9ICIiIF07IFwKCXRoZW4gbWtkaXIgLXAgJChJTlNUQUxMRElSKS8kKEVCSU4pOyBcCgkJbWtkaXIgLXAgJChJTlNUQUxMRElSKS8kKFNSQyk7IFwKCQljcCAtcFBSICQoRUJJTikgJChJTlNUQUxMRElSKTsgXAoJCWNwIC1wUFIgJChTUkMpICQoSU5TVEFMTERJUik7IFwKCWVsc2UgXAoJCWVjaG8gIkVSUk9SOiBObyAnRVJMX0xJQicgdmFsdWUgaXMgc2V0IGluIHRoZSBlbnYuIiBcCgkJJiYgZXhpdCAxOyBcCglmaQoKdXBsb2FkOiAkKEVYUE0pIGdldC12ZXJzaW9uCglAZWNobyAiUHJlcGFyaW5nIHRvIHVwbG9hZCB7e1BST0pFQ1R9fSAuLi4iCglAZWNobwoJQGVjaG8gIlBhY2thZ2UgZmlsZToiCglAZWNobwoJQGNhdCBwYWNrYWdlLmV4cwoJQGVjaG8KCUBlY2hvICJDb250aW51ZSB3aXRoIHVwbG9hZD8gIgoJQHJlYWQKCSQoRVhQTSkgcHVibGlzaAo="
otpmk="aW5jbHVkZSBjb21tb24ubWsKCnJ1bjoKCUBlY2hvICJSdW5uaW5nIE9UUCBhcHAgaW4gdGhlIGZvcmVncm91bmQgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtZXZhbCAiYXBwbGljYXRpb246c3RhcnQoJ3t7UFJPSkVDVH19JykiCgpkYWVtb246CglAZWNobyAiUnVubmluZyBPVFAgYXBwIGluIHRoZSBiYWNrZ3JvdW5kIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgXAoJLWV2YWwgImFwcGxpY2F0aW9uOnN0YXJ0KCd7e1BST0pFQ1R9fScpIiAtZGV0YWNoZWQgLW5vc2hlbGwK"
yawsmk="aW5jbHVkZSBjb21tb24ubWsKCkVUQ19ESVIgPSAuL2V0YwpZQVdTX0RJUiA9ICQoREVQUykveWF3cwpZQVdTID0gJChZQVdTX0RJUikvYmluL3lhd3MKWUFXU19DT05GID0gJChFVENfRElSKS95YXdzLmNvbmYKWUFXU19TRVJWRVJfSUQgPSBjaGFuZ2VtZQoKZGV2OiBjb21waWxlLW5vLWRlcHMKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKFlBV1MpIC1pIC0tY29uZiAkKFlBV1NfQ09ORikgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKcnVuOiBjb21waWxlCglARVJMX0xJQlM9JChFUkxfTElCUykgJChZQVdTKSAtRCAtLWhlYXJ0IC0tY29uZiAkKFlBV1NfQ09ORikgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKdXBkYXRlLWNvbmY6CglARVJMX0xJQlM9JChFUkxfTElCUykgJChZQVdTKSAtaCAtLWNvbmYgJChZQVdTX0NPTkYpIC0taWQgJChZQVdTX1NFUlZFUl9JRCkKCnN0YXRzOgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoWUFXUykgLVMgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKc3RvcDoKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKFlBV1MpIC0tc3RvcCAtLWlkICQoWUFXU19TRVJWRVJfSUQpCg=="
libmakefile="aW5jbHVkZSBjb21tb24ubWsK"
svcmakefile="aW5jbHVkZSBvdHAubWsK"
travisci="bGFuZ3VhZ2U6IGVybGFuZwpzY3JpcHQ6ICJtYWtlIGNoZWNrIgpub3RpZmljYXRpb25zOgogICNpcmM6ICJpcmMuZnJlZW5vZGUub3JnI1lPVVItUFJPSkVDVC1DSEFOTkVMIgogIHJlY2lwaWVudHM6CiAgICAjLSBZT1VAWU9VUi5ET01BSU4Kb3RwX3JlbGVhc2U6CiAgLSBSMTZCMDMKICAtIFIxNUIwMwo="
readme="IyMjIyMjIyMjIyMKe3tQUk9KRUNUfX0KIyMjIyMjIyMjIyMKCgpJbnRyb2R1Y3Rpb24KPT09PT09PT09PT09CgpBZGQgY29udGVudCB0byBtZSBoZXJlIQoKCkRlcGVuZGVuY2llcwotLS0tLS0tLS0tLS0KClRoaXMgcHJvamVjdCBhc3N1bWVzIHRoYXQgeW91IGhhdmUgYHJlYmFyYF8gaW5zdGFsbGVkIHNvbXdoZXJlIGluIHlvdXIKYGAkUEFUSGBgLgoKVGhpcyBwcm9qZWN0IGRlcGVuZHMgdXBvbiB0aGUgZm9sbG93aW5nLCB3aGljaCBhcmUgaW5zdGFsbGVkIHRvIHRoZSBgYGRlcHNgYApkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0IHdoZW4geW91IHJ1biBgYG1ha2UgZGVwc2BgOgoKKiBgTEZFYF8gKExpc3AgRmxhdm9yZWQgRXJsYW5nOyBuZWVkZWQgb25seSB0byBjb21waWxlKQoqIGBsZmV1bml0YF8gKG5lZWRlZCBvbmx5IHRvIHJ1biB0aGUgdW5pdCB0ZXN0cykKCgpJbnN0YWxsYXRpb24KPT09PT09PT09PT09CgpKdXN0IGFkZCBpdCB0byB5b3VyIGBgcmViYXIuY29uZmlnYGAgZGVwczoKCi4uIGNvZGU6OiBlcmxhbmcKCiAgICB7ZGVwcywgWwogICAgICAgIC4uLgogICAgICAgIHt7e1BST0pFQ1R9fSwgIi4qIiwge2dpdCwgImdpdEBnaXRodWIuY29tOllPVVJOQU1FL3t7UFJPSkVDVH19LmdpdCIsICJtYXN0ZXIifX0KICAgICAgXX0uCgoKQW5kIHRoZW4gZG8gdGhlIHVzdWFsOgoKLi4gY29kZTo6IGJhc2gKCiAgICAkIHJlYmFyIGdldC1kZXBzCiAgICAkIHJlYmFyIGNvbXBpbGUKCgpVc2FnZQo9PT09PQoKQWRkIGNvbnRlbnQgdG8gbWUgaGVyZSEKCi4uIExpbmtzCi4uIC0tLS0tCi4uIF9yZWJhcjogaHR0cHM6Ly9naXRodWIuY29tL3JlYmFyL3JlYmFyCi4uIF9MRkU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ydmlyZGluZy9sZmUKLi4gX2xmZXVuaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZmUvbGZldW5pdAo="
scriptfile="IyEgL3Vzci9iaW4vZW52IGxmZXNjcmlwdAo7OyAtKi0gbW9kZTogbGZlIC0qLQo7OyEgLXNtcCBlbmFibGUgLXNuYW1lIGZhY3RvcmlhbCAtbW5lc2lhIGRlYnVnIHZlcmJvc2UKKGRlZnVuIG1haW4KICAoKChsaXN0IHN0cmluZykpCiAgICAodHJ5CiAgICAgIChsZXQqICgobiAobGlzdF90b19pbnRlZ2VyIHN0cmluZykpCiAgICAgICAgICAgICAgKGYgKGZhYyBuKSkpCiAgICAgICAgICg6IGxmZV9pbyBmb3JtYXQgJyJmYWN0b3JpYWwgfncgPSB+d1xuIiAobGlzdCBuIGYpKSkKICAgICAgKGNhdGNoCiAgICAgICAgKCh0dXBsZSBfIF8gXykgKHVzYWdlKSkpKSkKICAgICgoXykgKHVzYWdlKSkpCgooZGVmdW4gZmFjCiAgKCgwKSAxKQogICgobikgKCogbiAoZmFjICgtIG4gMSkpKSkpCgooZGVmdW4gdXNhZ2UgKCkKICAobGV0ICgoc2NyaXB0LW5hbWUgKDogZXNjcmlwdCBzY3JpcHRfbmFtZSkpKQogICAgKDogbGZlX2lvIGZvcm1hdCAnInVzYWdlOiB+cyA8aW50ZWdlcj5cbiIgKGxpc3Qgc2NyaXB0LW5hbWUpKSkp"
libappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0nCiAgIF19LAoKICAlJSBBbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbmFtZXMgdGhlIGFwcGxpY2F0aW9uIHVzZXMuIFRoaXMgY2FuIGJlIGlnbm9yZWQuCiAge3JlZ2lzdGVyZWQsIFtdfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0u"
libtestmodule="KGRlZm1vZHVsZSB1bml0LXt7UFJPSkVDVH19LXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBteS1hZGRlcgogIChpcy1lcXVhbCA0ICg6IHt7UFJPSkVDVH19IG15LWFkZGVyIDIgMikpKQo="
libmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkp"
svcappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0tYXBwJywKICAgICd7e1BST0pFQ1R9fS1zZXJ2ZXInLAogICAgJ3t7UFJPSkVDVH19LXN1cCcKICAgXX0sCgogICUlIEFsbCBvZiB0aGUgcmVnaXN0ZXJlZCBuYW1lcyB0aGUgYXBwbGljYXRpb24gdXNlcy4gVGhpcyBjYW4gYmUgaWdub3JlZC4KICB7cmVnaXN0ZXJlZCwgWyd7e1BST0pFQ1R9fS1zdXAnXX0sCgogICUlIEFwcGxpY2F0aW9ucyB0aGF0IGFyZSB0byBiZSBzdGFydGVkIHByaW9yIHRvIHRoaXMgb25lLiBUaGlzIGNhbiBiZSBpZ25vcmVkCiAgJSUgbGVhdmUgaXQgYWxvbmUgdW5sZXNzIHlvdSB1bmRlcnN0YW5kIGl0IHdlbGwgYW5kIGxldCB0aGUgLnJlbCBmaWxlcyBpbgogICUlIHlvdXIgcmVsZWFzZSBoYW5kbGUgdGhpcy4KICB7YXBwbGljYXRpb25zLAogICBbCiAgICBrZXJuZWwsCiAgICBzdGRsaWIKICAgXX0sCgogICUlIE9UUCBhcHBsaWNhdGlvbiBsb2FkZXIgd2lsbCBsb2FkLCBidXQgbm90IHN0YXJ0LCBpbmNsdWRlZCBhcHBzLiBBZ2FpbgogICUlIHRoaXMgY2FuIGJlIGlnbm9yZWQgYXMgd2VsbC4gIFRvIGxvYWQgYnV0IG5vdCBzdGFydCBhbiBhcHBsaWNhdGlvbiBpdAogICUlIGlzIGVhc2llciB0byBpbmNsdWRlIGl0IGluIHRoZSAucmVsIGZpbGUgZm9sbG93ZWQgYnkgdGhlIGF0b20gJ25vbmUnCiAge2luY2x1ZGVkX2FwcGxpY2F0aW9ucywgW119LAoKICAlJQogIHttb2QsIHsne3tQUk9KRUNUfX0tYXBwJywgW119fSwKCiAgJSUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIHNpbWlsYXIgdG8gdGhvc2UgaW4gdGhlIGNvbmZpZyBmaWxlIHNwZWNpZmllZAogICUlIG9uIHRoZSBjb21tYW5kIGxpbmUuIGNhbiBiZSBmZXRjaGVkIHdpdGggZ2FzOmdldF9lbnYKICB7ZW52LCBbXX0KIF0KfS4K"
svctestmodule="KGRlZm1vZHVsZSB1bml0LXt7UFJPSkVDVH19LXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBjb2RlLWNoYW5nZQogIChpcy1lcXVhbAogICAgOzsgWFhYIFRoaXMgdW5pdCB0ZXN0IGZhaWxzIGJ5IGRlZmF1bHQgLS0gZml4IGl0IQogICAgIyhvayAiZGF0YSIpCiAgICAoOiB7e1BST0pFQ1R9fS1zZXJ2ZXIgY29kZV9jaGFuZ2UKICAgICAgICcib2xkIHZlcnNpb24iCiAgICAgICAnInN0YXRlIgogICAgICAgJyJleHRyYSIpKSkK"
svcapp="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1hcHAKICAoYmVoYXZpb3VyIGFwcGxpY2F0aW9uKQogIChleHBvcnQgKHN0YXJ0IDIpCiAgICAgICAgICAoc3RvcCAxKSkpCgooZGVmdW4gc3RhcnQgKHR5cGUgYXJncykKICAobGV0ICgocmVzdWx0ICg6IHt7UFJPSkVDVH19LXN1cCBzdGFydF9saW5rKSkpCiAgICAoY2FzZSByZXN1bHQKICAgICAgKCh0dXBsZSAnb2sgcGlkKQogICAgICAgIHJlc3VsdCkKICAgICAgKF8KICAgICAgICAodHVwbGUgJ2Vycm9yIHJlc3VsdCkpKSkpCgooZGVmdW4gc3RvcCAoc3RhdGUpCiAgJ29rKQo="
svcserver="Ozs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OzsgQGF1dGhvciAgWU9VUiBOQU1FLCA8WU9VUiBFTUFJTD4KOzs7IEBjb3B5cmlnaHQgKEMpIFlFQVIsCjs7OyBAZG9jCjs7OyAgICAgWU9VUiBQUk9KRUNUIGFwcGxpY2F0aW9uIHNlcnZlcgo7OzsgQGVuZAo7OzsgQ3JlYXRlZCA6IFRPREFZIGJ5IFlPVVIgRU1BSUwKOzs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmbW9kdWxlIHt7UFJPSkVDVH19LXNlcnZlcgogIChiZWhhdmlvdXIgZ2VuX3NlcnZlcikKICA7OyBBUEkKICAoZXhwb3J0IChzdGFydF9saW5rIDApCiAgICAgICAgICAodGVzdC1jYWxsIDEpCiAgICAgICAgICAodGVzdC1jYXN0IDEpKQogIDs7IGdlbl9zZXJ2ZXIgY2FsbGJhY2tzCiAgKGV4cG9ydCAoaW5pdCAxKQogICAgICAgICAgKGhhbmRsZV9jYWxsIDMpCiAgICAgICAgICAoaGFuZGxlX2Nhc3QgMikKICAgICAgICAgIChoYW5kbGVfaW5mbyAyKQogICAgICAgICAgKHRlcm1pbmF0ZSAyKQogICAgICAgICAgKGNvZGVfY2hhbmdlIDMpKSkKCihkZWZyZWNvcmQgc3RhdGUKICAoZGF0YSAodHVwbGUpKSkKCihkZWZ1biBzZXJ2ZXItbmFtZSAoKQogICd7e1BST0pFQ1R9fS1zZXJ2ZXIpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBBUEkKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAZG9jCjs7IFN0YXJ0cyB0aGUgc2VydmVyCjs7Cjs7IEBzcGVjIHN0YXJ0X2xpbmsoKSAtPiB7b2ssIFBpZH0gfCBpZ25vcmUgfCB7ZXJyb3IsIEVycm9yfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIHN0YXJ0X2xpbmsgKCkKICAoOiBnZW5fc2VydmVyIHN0YXJ0X2xpbmsKICAgICAodHVwbGUgJ2xvY2FsIChzZXJ2ZXItbmFtZSkpIChNT0RVTEUpICcoKSAnKCkpKQoKKGRlZnVuIHRlc3QtY2FsbCAobWVzc2FnZSkKICAoOiBnZW5fc2VydmVyIGNhbGwKICAgICAoc2VydmVyLW5hbWUpICh0dXBsZSAndGVzdCBtZXNzYWdlKSkpCgooZGVmdW4gdGVzdC1jYXN0IChtZXNzYWdlKQogICg6IGdlbl9zZXJ2ZXIgY2FzdAogICAgIChzZXJ2ZXItbmFtZSkgKHR1cGxlICd0ZXN0IG1lc3NhZ2UpKSkKCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KOzs7IGdlbl9zZXJ2ZXIgY2FsbGJhY2tzCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBJbml0aWFsaXplcyB0aGUgc2VydmVyCjs7Cjs7IEBzcGVjIGluaXQoQXJncykgLT4ge29rLCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgIHtvaywgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICBpZ25vcmUgfAo7OyAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb259Cjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gaW5pdCAoYXJncykKICAodHVwbGUgJ29rIChtYWtlLXN0YXRlKSkpCgoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGNhbGwgbWVzc2FnZXMKOzsKOzsgQHNwZWMgaGFuZGxlX2NhbGwoUmVxdWVzdCwgRnJvbSwgU3RhdGUpIC0+Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVwbHksIFJlcGx5LCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlcGx5LCBSZXBseSwgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25vcmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBSZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9jYWxsCiAgKCgodHVwbGUgJ3Rlc3QgbWVzc2FnZSkgZnJvbSBzdGF0ZSkKICAgICg6IGxmZV9pbyBmb3JtYXQgJyJDYWxsOiB+cH5uIiAobGlzdCBtZXNzYWdlKSkKICAgICh0dXBsZSAncmVwbHkgJ29rIHN0YXRlKSkKICAoKHJlcXVlc3QgZnJvbSBzdGF0ZSkKICAgICh0dXBsZSAncmVwbHkgJ29rIHN0YXRlKSkpCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgSGFuZGxpbmcgY2FzdCBtZXNzYWdlcwo7Owo7OyBAc3BlYyBoYW5kbGVfY2FzdChNc2csIFN0YXRlKSAtPiB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25vcmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9jYXN0CiAgKCgodHVwbGUgJ3Rlc3QgbWVzc2FnZSkgc3RhdGUpCiAgICAoOiBsZmVfaW8gZm9ybWF0ICciQ2FzdDogfnB+biIgKGxpc3QgbWVzc2FnZSkpCiAgICAodHVwbGUgJ25vcmVwbHkgc3RhdGUpKQogICgobWVzc2FnZSBzdGF0ZSkKICAgICh0dXBsZSAnbm9yZXBseSBzdGF0ZSkpKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGFsbCBub24gY2FsbC9jYXN0IG1lc3NhZ2VzCjs7Cjs7IEBzcGVjIGhhbmRsZV9pbmZvKEluZm8sIFN0YXRlKSAtPiB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0b3AsIFJlYXNvbiwgU3RhdGV9Cjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gaGFuZGxlX2luZm8gKGluZm8gc3RhdGUpCiAgKHR1cGxlICdub3JlcGx5IHN0YXRlKSkKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSBhIGdlbl9zZXJ2ZXIgd2hlbiBpdCBpcyBhYm91dCB0bwo7OyB0ZXJtaW5hdGUuIEl0IHNob3VsZCBiZSB0aGUgb3Bwb3NpdGUgb2YgTW9kdWxlOmluaXQvMSBhbmQgZG8gYW55Cjs7IG5lY2Vzc2FyeSBjbGVhbmluZyB1cC4gV2hlbiBpdCByZXR1cm5zLCB0aGUgZ2VuX3NlcnZlciB0ZXJtaW5hdGVzCjs7IHdpdGggUmVhc29uLiBUaGUgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuCjs7Cjs7IEBzcGVjIHRlcm1pbmF0ZShSZWFzb24sIFN0YXRlKSAtPiB2b2lkKCkKOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biB0ZXJtaW5hdGUgKHJlYXNvbiBzdGF0ZSkKICAnb2spCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgQ29udmVydCBwcm9jZXNzIHN0YXRlIHdoZW4gY29kZSBpcyBjaGFuZ2VkCjs7Cjs7IEBzcGVjIGNvZGVfY2hhbmdlKE9sZFZzbiwgU3RhdGUsIEV4dHJhKSAtPiB7b2ssIE5ld1N0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGNvZGVfY2hhbmdlIChvbGQtdmVyc2lvbiBzdGF0ZSBleHRyYSkKICAodHVwbGUgJ29rIHN0YXRlKSkKCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KOzs7IEludGVybmFsIGZ1bmN0aW9ucwo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cg=="
svcsup="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1zdXAKICAoYmVoYXZpb3VyIHN1cGVydmlzb3IpCiAgOzsgQVBJCiAgKGV4cG9ydCAoc3RhcnRfbGluayAwKSkKICA7OyBTdXBlcnZpc29yIGNhbGxiYWNrcwogIChleHBvcnQgKGluaXQgMSkpKQoKKGRlZnVuIHNlcnZlci1uYW1lICgpCiAgJ3t7UFJPSkVDVH19LXN1cCkKCihkZWZ1biBzdGFydF9saW5rICgpCiAgKDogc3VwZXJ2aXNvciBzdGFydF9saW5rCiAgICAodHVwbGUgJ2xvY2FsIChzZXJ2ZXItbmFtZSkpIChNT0RVTEUpICcoKSkpCgooZGVmdW4gaW5pdCAoYXJncykKICAobGV0KiAoKHNlcnZlciAodHVwbGUKICAgICAgICAgICAgICAgICAgICd7e1BST0pFQ1R9fS1zZXJ2ZXIKICAgICAgICAgICAgICAgICAgICh0dXBsZSAne3tQUk9KRUNUfX0tc2VydmVyICdzdGFydF9saW5rICcoKSkKICAgICAgICAgICAgICAgICAgICdwZXJtYW5lbnQKICAgICAgICAgICAgICAgICAgIDIwMDAKICAgICAgICAgICAgICAgICAgICd3b3JrZXIKICAgICAgICAgICAgICAgICAgIChsaXN0ICd7e1BST0pFQ1R9fS1zZXJ2ZXIpCiAgICAgICAgICAgICAgICAgICApKQogICAgICAgICAoY2hpbGRyZW4gKGxpc3Qgc2VydmVyKSkKICAgICAgICAgKHJlc3RhcnQtc3RyYXRlZ3kgKHR1cGxlICdvbmVfZm9yX29uZSAzIDEpKSkKICAgICh0dXBsZSAnb2sgKHR1cGxlIHJlc3RhcnQtc3RyYXRlZ3kgY2hpbGRyZW4pKSkpCg=="
yawsmakefile="aW5jbHVkZSB5YXdzLm1rCg=="
yawsrebar="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QvdW5pdCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0ZXN0L2ludGVncmF0aW9uIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInRlc3Qvc3lzdGVtIl19XX0uCntsZmVfZmlyc3RfZmlsZXMsIFtdfS4Ke2RlcHNfZGlyLCBbImRlcHMiXX0uCntldW5pdF9jb21waWxlX29wdHMsIFsKICAge3NyY19kaXJzLCBbInRlc3QvdW5pdCIsCiAgICAgICAgICAgICAgICJ0ZXN0L2ludGVncmF0aW9uIiwKICAgICAgICAgICAgICAgInRlc3Qvc3lzdGVtIiwKICAgICAgICAgICAgICAgInNyYyJdfQogIF19Lgp7ZGVwcywgWwogICB7bGZlLCAiLioiLCB7Z2l0LCAiZ2l0Oi8vZ2l0aHViLmNvbS9ydmlyZGluZy9sZmUuZ2l0IiwgImRldmVsb3AifX0sCiAgIHsnbGZlLXV0aWxzJywgIi4qIiwge2dpdCwgImh0dHBzOi8vZ2l0aHViLmNvbS9sZmUvbGZlLXV0aWxzLmdpdCIsICJtYXN0ZXIifX0sCiAgIHtsZmV1bml0LCAiLioiLCB7Z2l0LCAiZ2l0Oi8vZ2l0aHViLmNvbS9sZmUvbGZldW5pdC5naXQiLCAibWFzdGVyIn19LAogICB7ZXhlbXBsYXIsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL2xmZS9leGVtcGxhci5naXQiLCAibWFzdGVyIn19LAogICB7eWF3cywgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20va2xhY2tlL3lhd3MuZ2l0IiwgIm1hc3RlciJ9fQogIF19Lgo="
yawsconf="bG9nZGlyID0gbG9ncwplYmluX2RpciA9IGRlcHMveWF3cy92YXIveWF3cy9lYmluCmViaW5fZGlyID0gZWJpbgpsb2dfcmVzb2x2ZV9ob3N0bmFtZSA9IGZhbHNlCmZhaWxfb25fYmluZF9lcnIgPSB0cnVlCgo8c2VydmVyIGxvY2FsaG9zdD4KICAgICAgICBwb3J0ID0gNTA5OQogICAgICAgIGxpc3RlbiA9IDAuMC4wLjAKICAgICAgICBhcHBtb2RzID0gPC8sIHt7UFJPSkVDVH19PgogICAgICAgIGRvY3Jvb3QgPSB3d3cKPC9zZXJ2ZXI+Cg=="
yawsmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkpCgooZGVmdW4gb3V0IChhcmctZGF0YSkKICAiVGhpcyBmdW5jdGlvbiBpcyBleGVjdXRlZCBieSBZQVdTLiBJdCBpcyB0aGUgWUFXUyBlbnRyeSBwb2ludCBmb3Igb3VyIGFwcC4iCiAgKGxldCAoKHJhdy1wYXRoLWluZm8gKDoge3tQUk9KRUNUfX0tdXRpbCBwYXJzZS1wYXRoIGFyZy1kYXRhKSkpCiAgICAoaWYgKD09IHJhdy1wYXRoLWluZm8gJ3VuZGVmaW5lZCkKICAgICAgKDoge3tQUk9KRUNUfX0tcm91dGVzIHJvdXRlcyAnKCIiKSBhcmctZGF0YSkKICAgICAgKGxldCAoKHBhdGgtaW5mbyAoOiBzdHJpbmcgdG9rZW5zIHJhdy1wYXRoLWluZm8gJyIvIikpKQogICAgICAgICg6IHt7UFJPSkVDVH19LXJvdXRlcyByb3V0ZXMgcGF0aC1pbmZvIGFyZy1kYXRhKSkpKSkK"
yawsroutesmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1yb3V0ZXMKICAoZXhwb3J0IGFsbCkpCgooaW5jbHVkZS1saWIgImRlcHMvZXhlbXBsYXIvaW5jbHVkZS9odG1sLW1hY3Jvcy5sZmUiKQoKKGRlZnVuIHJvdXRlcwogICIyLWFyaXR5IHJvdXRlcyBmb3Igb3VyIGFwcC4iCiAgOzsgLwogICgoKGxpc3QgJyIiKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgYXJnLWRhdGEpKQogIDs7IC9jb250ZW50LzppZAogICgoKGxpc3QgJyJjb250ZW50IiBpdGVtLWlkKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgaXRlbS1pZCBhcmctZGF0YSkpCiAgOzsgL3JlbGF0aW9uLzp1c2VyaWQvOmFjY291bnRpZAogICgoKGxpc3QgJyJyZWxhdGlvbiIgdXNlci1pZCBhY2NvdW50LWlkKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgdXNlci1pZCBhY2NvdW50LWlkIGFyZy1kYXRhKSkKICA7OyBwb3RlbnRpYWxseSBtYW55IG90aGVyIHJvdXRlcwogIDs7CiAgOzsgV2hlbiBub3RoaW5nIG1hdGNoZXMsIGRvIHRoaXMKICAoKHBhdGggYXJnLWRhdGEpCiAgICAoOiBpbyBmb3JtYXQKICAgICAgJyJVbm1hdGNoZWQgcm91dGUhfm4gUGF0aC1pbmZvOiB+cH5uIGFyZy1kYXRhOiB+cH5ufm4iCiAgICAgIChsaXN0IHBhdGggYXJnLWRhdGEpKQogICAgKDoge3tQUk9KRUNUfX0tY29udGVudCBmb3VyLW9oLWZvdXIKICAgICAgKCsrIChzdHJvbmcgJyJVbm1hdGNoZWQgUm91dGU6ICIpICciLyIgKDogc3RyaW5nIGpvaW4gcGF0aCAnIi8iKSkpKSkK"
yawscontentmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1jb250ZW50CiAgKGV4cG9ydCBhbGwpKQoKKGluY2x1ZGUtbGliICJkZXBzL2V4ZW1wbGFyL2luY2x1ZGUvaHRtbC1tYWNyb3MubGZlIikKCihkZWZ1biBnZXQtY29udGVudCAoYXJnLWRhdGEpCiAgIjEtYXJpdHkgY29udGVudCBBUEkuCgogIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGl0cyBIVE1MIGZyb20gc2NyYXRjaC4iCiAgKDoge3tQUk9KRUNUfX0tdXRpbCBtYWtlLTIwMC1yZXN1bHQKICAgIChodG1sCiAgICAgIChsaXN0CiAgICAgICAgICAoaGVhZAogICAgICAgICAgICAodGl0bGUgJyJNYWluIFBhZ2UiKSkKICAgICAgICAgIChib2R5CiAgICAgICAgICAgIChtYWluCiAgICAgICAgICAgICAgKGRpdgogICAgICAgICAgICAgICAgKGxpc3QKICAgICAgICAgICAgICAgICAgKGgxICciTWFpbiBQYWdlIikKICAgICAgICAgICAgICAgICAgKGgyICciTGlua3MiKQogICAgICAgICAgICAgICAgICAodWwKICAgICAgICAgICAgICAgICAgICAobGlzdAogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMSIpICciL2NvbnRlbnQvMSIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMiIpICciL2NvbnRlbnQvMiIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMyIpICciL2NvbnRlbnQvMyIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpCiAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgJyhocmVmICIvcmVsYXRpb24vMS8yIikgJyIvcmVsYXRpb24vMS8yIikKICAgICAgICAgICAgICAgICAgICAgICAgICAnIiAoYSB0ZW1wbGF0ZS1iYXNlZCBwYWdlKSIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2JvYiIpICciNDA0IikpKSkpKSkpKSkpKQoKKGRlZnVuIGdldC1jb250ZW50IChpdGVtLWlkIGFyZy1kYXRhKQogICIyLWFyaXR5IGNvbnRlbnQgQVBJLgoKICBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBpdHMgSFRNTCBmcm9tIHNjcmF0Y2guIgogIDs7IHdlJ2xsIHByZXRlbnQgdG8gcHVsbCBjb250ZW50IGZyb20gYSBkYXRhIHN0b3JlIGhlcmUgLi4uCiAgKGxldCAoKGZldGNoZWQtdGl0bGUgJyJRdWVyaWVkIFRpdGxlIikKICAgICAgICAoZmV0Y2hlZC1jb250ZW50ICciU29tZSBzdXBlci1ncmVhdCBxdWVyaWVkIGxvcmVtIGlwc3VtLiIpKQogICAgKDoge3tQUk9KRUNUfX0tdXRpbCBtYWtlLTIwMC1yZXN1bHQKICAgICAgKGh0bWwKICAgICAgICAobGlzdAogICAgICAgICAgICAoaGVhZAogICAgICAgICAgICAgICh0aXRsZSBmZXRjaGVkLXRpdGxlKSkKICAgICAgICAgICAgKGJvZHkKICAgICAgICAgICAgICAobWFpbgogICAgICAgICAgICAgICAgKGRpdiAnKGNsYXNzICJkeW5hbWljIGNvbnRlbnQiKQogICAgICAgICAgICAgICAgICAobGlzdAogICAgICAgICAgICAgICAgICAgIChoMSBmZXRjaGVkLXRpdGxlKQogICAgICAgICAgICAgICAgICAgIChoMiAoKysgJyJJdGVtICIgaXRlbS1pZCkpCiAgICAgICAgICAgICAgICAgICAgKGRpdiAocCBmZXRjaGVkLWNvbnRlbnQpKSkpKSkpKSkpKQoKKGRlZnVuIGdldC1jb250ZW50ICh1c2VyLWlkIGFjY291bnQtaWQgYXJnLWRhdGEpCiAgIjMtYXJpdHkgY29udGVudCBBUEkuCgogIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGl0cyBIVE1MIGJ5IGNhbGxpbmcgYW5vdGhlciBmdW5jdGlvbi4gVGhpcyBpcyBhbgogIGV4YW1wbGUgb2YgaG93IG9uZSBjb3VsZCBkbyB0ZW1wbGF0aW5nIC0tIGluY2x1ZGluZyBwdXR0aW5nIEhUTUwtZ2VuZXJhdGluZwogIGZ1bmN0aW9ucyBpbiB0aGVpciBvd24gbW9kdWxlcy4iCiAgOzsgd2UnbGwgcHJldGVudCB0byBwdWxsIGNvbnRlbnQgZnJvbSBhIGRhdGEgc3RvcmUgaGVyZSAuLi4KICAobGV0ICgoZmV0Y2hlZC10aXRsZSAnIlF1ZXJpZWQgVGl0bGUiKQogICAgICAgIChmZXRjaGVkLWNvbnRlbnQgJyJTb21lIHN1cGVyLWdyZWF0IHF1ZXJpZWQgbG9yZW0gaXBzdW0uIikpCiAgICAoOiB7e1BST0pFQ1R9fS11dGlsIG1ha2UtMjAwLXJlc3VsdAogICAgICAoYmFzZS1wYWdlCiAgICAgICAgZmV0Y2hlZC10aXRsZQogICAgICAgIChkaXYgJyhjbGFzcyAiZHluYW1pYyBjb250ZW50IikKICAgICAgICAgIChsaXN0CiAgICAgICAgICAgIChoMSBmZXRjaGVkLXRpdGxlKQogICAgICAgICAgICAoaDIgKCsrICciUmVsYXRpb246ICIKICAgICAgICAgICAgICAgICAgICB1c2VyLWlkICciICh1c2VyIGlkKSB8ICIKICAgICAgICAgICAgICAgICAgICBhY2NvdW50LWlkICciIChhY2NvdW50IGlkKSIpKQogICAgICAgICAgICAoZGl2IChwIGZldGNoZWQtY29udGVudCkpKSkpKSkpCgooZGVmdW4gYmFzZS1wYWdlICh0aXRsZSByZW1haW5pbmcpCiAgIldlIGNhbiBhbHNvIG1ha2UgYnVpbGRpbmcgSFRNTCBlYXNpZXIgYnkgdXNpbmcgZnVuY3Rpb25zLiIKICAoaHRtbAogICAgKGxpc3QKICAgICAgKGhlYWQKICAgICAgICAodGl0bGUgdGl0bGUpKQogICAgICAoYm9keQogICAgICAgIChtYWluIHJlbWFpbmluZykpKSkpCgooZGVmdW4gZm91ci1vaC1mb3VyIChtZXNzYWdlKQogICJDdXN0b20gNDA0IHBhZ2UuIgogICAgKDogeWF3cy0xLXV0aWwgbWFrZS00MDQtcmVzdWx0CiAgICAgIChiYXNlLXBhZ2UgJyI0MDQiCiAgICAgICAgKGRpdgogICAgICAgICAgKGxpc3QKICAgICAgICAgICAgKGgxICciNDA0IC0gTm90IEZvdW5kIikKICAgICAgICAgICAgKGRpdiAocCBtZXNzYWdlKSkpKSkpKQoKCgoK"
yawsutilmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS11dGlsCiAgKGV4cG9ydCBhbGwpKQoKKGluY2x1ZGUtbGliICJkZXBzL3lhd3MvaW5jbHVkZS95YXdzX2FwaS5ocmwiKQoKKGRlZnVuIHBhcnNlLXBhdGggKGFyZy1kYXRhKQogICJHZXQgcGF0aGluZm8uIFRoaXMgaXMgdXNlZCBhcyB0aGUga2V5IHRvIHJlZmVyIHRvIHNwZWNpZmljIHByZWZlcmVuY2VzLgoKICBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB1c2VzIG1hY3JvcyBnZW5lcmF0ZWQgYnkgTEZFIHdoZW4gdGhlaCB5YXdzX2FwaS5ocmwKICBmaWxlIGlzIHBhcnNlZC4iCiAgKGFyZy1wYXRoaW5mbyBhcmctZGF0YSkpCgooZGVmdW4gbWFrZS1yZXN1bHQgKHBheWxvYWQpCiAgKG1ha2UtcmVzdWx0IDIwMCBwYXlsb2FkKSkKCihkZWZ1biBtYWtlLXJlc3VsdCAoc3RhdHVzLWNvZGUgcGF5bG9hZCkKICBgKCMoc3RhdHVzICxzdGF0dXMtY29kZSkgLHBheWxvYWQpKQoKKGRlZnVuIG1ha2UtcmVzdWx0IChzdGF0dXMtY29kZSBwYXlsb2FkIGhlYWRlcnMpCiAgKCsrIChtYWtlLXJlc3VsdCBzdGF0dXMtY29kZSBwYXlsb2FkKSBoZWFkZXJzKSkKCihkZWZ1biBtYWtlLWh0bWwtcmVzdWx0IChzdGF0dXMtY29kZSBodG1sLWRhdGEpCiAgIlJldHVybiBhbiBIVE1MIHBheWxvYWQgZm9yIHRoZSBnaXZlbiBkYXRhLiIKICBgIyhjb250ZW50ICJ0ZXh0L2h0bWwiICxodG1sLWRhdGEpKQoKKGRlZnVuIG1ha2UtMjAwLXJlc3VsdCAoaHRtbC1kYXRhKQogICJPSy4iCiAgKG1ha2UtaHRtbC1yZXN1bHQgMjAwIGh0bWwtZGF0YSkpCgooZGVmdW4gbWFrZS00MDQtcmVzdWx0IChodG1sLWRhdGEpCiAgIk5PVC1GT1VORC4iCiAgKG1ha2UtaHRtbC1yZXN1bHQgNDA0IGh0bWwtZGF0YSkpCg=="

decode () {
    os=`uname`
    case $os in
        Darwin)
            base64 -D
            ;;
        *)
            base64 -d
            ;;
    esac
}

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | decode | sed \
        -e "s#{{SCRIPT}}#$script#g" \
        -e "s#{{FULLPATH}}#$fullpath#g" \
        -e "s#{{VERSION}}#$version#g"
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-subcommand-error () {
    local command=$1
    local subcommand=$2
    error "Unknown subcommand for '$command': '$subcommand'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

create-dirs () {
    local project=$1
    mkdir -p $project/{src,test/unit,test/integration,test/system}
}

create-yaws-dirs () {
    local project=$1
    mkdir -p $project/{www,etc,logs}
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    if [ "$pattern" = "" ]; then
        pattern="{{NOOP}}"
        project="{{NOOP}}"
    fi
    echo $data | decode | sed \
        -e "s/$pattern/$project/g" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$commonmk" $project/common.mk {{PROJECT}} $project
    create-file "$travisci" $project/.travis.yml {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$package" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
    create-file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    create-file "$otpmk" $project/otp.mk {{PROJECT}} $project
    create-file "$svcmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$svctestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
    create-file "$svcapp" \
        $project/src/${project}-app.lfe {{PROJECT}} $project
    create-file "$svcserver" \
        $project/src/${project}-server.lfe {{PROJECT}} $project
    create-file "$svcsup" \
        $project/src/${project}-sup.lfe {{PROJECT}} $project
}

create-yaws-files () {
    local project=$1
    create-file "$yawsmk" $project/yaws.mk {{PROJECT}} $project
    create-file "$yawsmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$yawsrebar" $project/rebar.config
    create-file "$yawsconf" $project/etc/yaws.conf {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$yawsmodule" $project/src/${project}.lfe {{PROJECT}} $project
    create-file "$yawsroutesmodule" \
        $project/src/${project}-routes.lfe {{PROJECT}} $project
    create-file "$yawscontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create-file "$yawsutilmodule" \
        $project/src/${project}-util.lfe {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/unit/unit-${project}-tests.lfe {{PROJECT}} $project
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore .travis.yml && \
    make check-all-with-deps
}

setup-service-project () {
    echo "Setting up starter OTP service project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-service-files $project
    cd $project && git init && git add * .gitignore .travis.yml && \
    make check-all-with-deps
}

setup-e2-service-project () {
    #echo "Setting up starter e2 service project ..."
    local project=$1
    not-implemented-error
}

setup-yaws-project () {
    echo "Setting up starter YAWS project ..."
    local project=$1
    create-dirs $project
    create-yaws-dirs $project
    create-project-files $project
    create-yaws-files $project
    cd $project && git init && git add * .gitignore .travis.yml && \
    make check-all-with-deps
}

create-new-yaws () {
    local command=$1
    local subcommand=$2
    local arg=$3
    case $subcommand in
        default)
            setup-yaws-project $arg
            ;;
        *)
            unknown-subcommand-error $command $subcommand
            ;;
    esac
}

create-new () {
    local context=$1
    local arg1=$2
    local arg2=$3
    case $context in
        script)
            setup-script-project $arg1
            ;;
        library)
            setup-library-project $arg1
            ;;
        service)
            setup-service-project $arg1
            ;;
        e2service)
            setup-e2-service-project $arg1
            ;;
        yaws)
            # check if arg2 is empty string; if so, assume no subcommand was
            # passed and use the default subcommand
            if [ "$arg2" == "" ]; then
                arg2=$arg1
                arg1="default"
            fi
            create-new-yaws $context $arg1 $arg2
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg1=$3
    local arg2=$4

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg1
            create-new $context $arg1 $arg2
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@
