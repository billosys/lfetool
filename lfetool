#!/bin/bash

version=0.1.2

gitignore="ZGVwcwoqLnN1YmxpbWUtcHJvamVjdAoqLnN1YmxpbWUtd29ya3NwYWNlCiouYmVhbQouZXVuaXQKZGVidWctKgplYmluLyoKYmluL2V4cG0K"
usage="U2NyaXB0OiB7e1NDUklQVH19LCB2JHZlcnNpb24KVXNhZ2U6ICRmdWxscGF0aCA8Y29tbWFuZD4gPGNvbnRleHQ+IDxhcmc+IHwgPG9wdGlvbnM+CgpDdXJyZW50bHksICRzY3JpcHQgc3VwcG9ydHMgdGhlc2UgY29tbWFuZHM6CiAqIGhlbHAKICogdmVyc2lvbgogKiBpbnN0YWxsCiAqIHVwZGF0ZQogKiBuZXcKCkFkZGl0aW9uYWxseSwgaW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tbWFuZCwgeW91IG1heSBjaG9vc2UgdG8gcnVuIHRoZSBzY3JpcHQKd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgogLWggICAgZGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2UgYW5kIGV4aXQKIC12ICAgIGRpc3BsYXkgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBleGl0CgpUaGVzZSBjb21tYW5kcyBhcmUgZG9jdW1lbnRlZCBvbiB0aGUgcHJvamVjdCBwYWdlIGhlcmU6CiAgaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV0b29sCg=="
rebarconfig="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QiXX1dfS4Ke2xmZV9maXJzdF9maWxlcywgW119Lgp7ZGVwc19kaXIsIFsiZGVwcyJdfS4Ke3BsdWdpbnMsIFsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nXX0uCntldW5pdF9jb21waWxlX29wdHMsIFsKICAge3NyY19kaXJzLCBbInRlc3QiLCAic3JjIl19CiAgXX0uCntkZXBzLCBbCiAgIHtsZmUsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZS5naXQiLCAiZGV2ZWxvcCJ9fSwKICAgeydsZmUtdXRpbHMnLCAiLioiLCB7Z2l0LCAiaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmUtdXRpbHMuZ2l0IiwgIm1hc3RlciJ9fSwKICAge2xmZXVuaXQsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL2xmZS9sZmV1bml0LmdpdCIsICJtYXN0ZXIifX0sCiAgIHsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nLAogICAgICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL291Yml3YW5uL2xmZS1zYW1wbGUtcmViYXItcGx1Z2luLmdpdCIsCiAgICAgIm1hc3RlciJ9fQogIF19Lgo="
package="RXhwbS5QYWNrYWdlLm5ldygKICBuYW1lOiAie3tQUk9KRUNUfX0iLAogIGRlc2NyaXB0aW9uOiAie3tQUk9KRUNUfX0gREVTQ1JJUFRJT04iLAogIHZlcnNpb246ICIwLjAuMSIsCiAga2V5d29yZHM6IFsiTEZFIiwgIkxpc3AiLCAiTGlicmFyeSIsICJBUEkiXSwKICBtYWludGFpbmVyczogW1tuYW1lOiAiWU9VUiBOQU1FIiwgZW1haWw6ICJZT1VSQEVNQUlMLmNvbSJdXSwKICByZXBvc2l0b3JpZXM6IFtbZ2l0aHViOiAiWU9VUl9HSVRIVUJfTkFNRS97e1BST0pFQ1R9fV1dKQo="
commonmk="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoTEZFX0RJUik6JChMRkVfVVRJTFNfRElSKTokKExGRVVOSVRfRElSKTouLwpTT1VSQ0VfRElSID0gLi9zcmMKT1VUX0RJUiA9IC4vZWJpbgpURVNUX0RJUiA9IC4vdGVzdApURVNUX09VVF9ESVIgPSAuLy5ldW5pdApGSU5JU0ggPSAtcnVuIGluaXQgc3RvcCAtbm9zaGVsbAoKZ2V0LXZlcnNpb246CglAZWNobwoJQGVjaG8gIkdldHRpbmcgdmVyc2lvbiBpbmZvIC4uLiIKCUBlY2hvCglAZWNobyAtbiBhcHAuc3JjOiAnJwoJQGVybCAtZXZhbCAnaW86Zm9ybWF0KCJ+cH5uIiwgWyBcCgkJcHJvcGxpc3RzOmdldF92YWx1ZSh2c24sZWxlbWVudCgzLGVsZW1lbnQoMixoZChlbGVtZW50KDMsIFwKCQllcmxfZXZhbDpleHBycyhlbGVtZW50KDIsIGVybF9wYXJzZTpwYXJzZV9leHBycyhlbGVtZW50KDIsIFwKCQllcmxfc2NhbjpzdHJpbmcoIkRhdGEgPSAiICsrIGJpbmFyeV90b19saXN0KGVsZW1lbnQoMiwgXAoJCWZpbGU6cmVhZF9maWxlKCJzcmMvJChMSUIpLmFwcC5zcmMiKSkpKSkpKSwgW10pKSkpKSldKScgXAoJCSQoRklOSVNIKQoJQGVjaG8gLW4gcGFja2FnZS5leHM6ICcnCglAZ3JlcCB2ZXJzaW9uIHBhY2thZ2UuZXhzIHxhd2sgJ3twcmludCAkJDJ9J3xzZWQgLWUgJ3MvLC8vZycKCUBlY2hvIC1uIGdpdCB0YWdzOiAnJwoJQGVjaG8gYGdpdCB0YWdgCgojIE5vdGUgdGhhdCB0aGlzIG1ha2UgdGFyZ2V0IGV4cGVjdHMgdG8gYmUgdXNlZCBsaWtlIHNvOgojICAgJCBFUkxfTElCPXNvbWUvcGF0aCBtYWtlIGdldC1pbnN0YWxsLWRpcgojCiMgV2hpY2ggd291bGQgZ2l2ZSB0aGUgZm9sbG93aW5nIHJlc3VsdDoKIyAgIHNvbWUvcGF0aC8kcHJvamVjdC0xLjAuMAojCmdldC1pbnN0YWxsLWRpcjoKCUBlY2hvICQoRVJMX0xJQikvJChQUk9KRUNUKS0kKHNoZWxsIG1ha2UgZ2V0LXZlcnNpb24pCgokKEJJTl9ESVIpOgoJbWtkaXIgLXAgJChCSU5fRElSKQoKJChFWFBNKTogJChCSU5fRElSKQoJY3VybCAtbyAkKEVYUE0pIGh0dHA6Ly9leHBtLmNvL19fZG93bmxvYWRfXy9leHBtCgljaG1vZCAreCAkKEVYUE0pCgpnZXQtZGVwczoKCUBlY2hvICJHZXR0aW5nIGRlcGVuZGVuY2llcyAuLi4iCglAcmViYXIgZ2V0LWRlcHMKCUBmb3IgRElSIGluICQod2lsZGNhcmQgJChERVBTKS8qKTsgXAoJZG8gY2QgJCRESVI7IGVjaG8gIlVwZGF0aW5nICQkRElSIC4uLiI7IFwKCWdpdCBwdWxsOyBjZCAtID4gL2Rldi9udWxsOyBkb25lCgpjbGVhbi1lYmluOgoJQGVjaG8gIkNsZWFuaW5nIGViaW4gZGlyIC4uLiIKCUBybSAtZiAkKE9VVF9ESVIpLyouYmVhbQoKY2xlYW4tZXVuaXQ6CglAZWNobyAiQ2xlYW5pbmcgZXVuaXQgZGlyIC4uLiIKCUBybSAtcmYgJChURVNUX09VVF9ESVIpCgpjb21waWxlOiBnZXQtZGVwcyBjbGVhbi1lYmluCglAZWNobyAiQ29tcGlsaW5nIHByb2plY3QgY29kZSBhbmQgZGVwZW5kZW5jaWVzIC4uLiIKCUByZWJhciBjb21waWxlCgpjb21waWxlLW5vLWRlcHM6IGNsZWFuLWViaW4KCUBlY2hvICJDb21waWxpbmcgb25seSBwcm9qZWN0IGNvZGUgLi4uIgoJQHJlYmFyIGNvbXBpbGUgc2tpcF9kZXBzPXRydWUKCmNvbXBpbGUtdGVzdHM6IGNsZWFuLWV1bml0CglAZWNobyAiQ29tcGlsaW5nIHRlc3RzIC4uLiIKCUBta2RpciAtcCAkKFRFU1RfT1VUX0RJUikKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRUMpIC1vICQoVEVTVF9PVVRfRElSKSAkKFRFU1RfRElSKS8qLypbXy1ddGVzdHMubGZlCglALUVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFQykgLW8gJChPVVRfRElSKSAkKFRFU1RfRElSKS90ZXN0aW5nWy1fXSoubGZlCgpzaGVsbDogY29tcGlsZQoJQGNsZWFyCglAZWNobyAiU3RhcnRpbmcgc2hlbGwgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtcGEgJChURVNUX09VVF9ESVIpCgpzaGVsbC1uby1kZXBzOiBjb21waWxlLW5vLWRlcHMKCUBjbGVhcgoJQGVjaG8gIlN0YXJ0aW5nIHNoZWxsIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgLXBhICQoVEVTVF9PVVRfRElSKQoKY2xlYW46IGNsZWFuLWViaW4gY2xlYW4tZXVuaXQKCUByZWJhciBjbGVhbgoKY2hlY2stdW5pdDoKCUBlY2hvICJCdWlsZGluZyBhbmQgcnVubmluZyB1bml0IHRlc3RzIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSBlcmwgLXBhIC5ldW5pdCAtbm9zaGVsbCBcCgktZXZhbCAiZXVuaXQ6dGVzdCh7aW5wYXJhbGxlbCxbXAoJCWBscyAuZXVuaXQvdW5pdCp0ZXN0cy5iZWFtfCBcCgkJc2VkIC1lICdzLy5iZWFtLy8nfCBcCgkJYXdrICd7cHJpbnQgIlx4MjciICQkMSAiXHgyNyJ9J3wgXAoJCXNlZCAnOmE7TjskJCFiYTtzL1xuLywvZydgXX0sW3ZlcmJvc2VdKSIgXAoJLXMgaW5pdCBzdG9wCgpjaGVjay1pbnRlZ3JhdGlvbjoKCUBlY2hvICJCdWlsZGluZyBhbmQgcnVubmluZyBpbnRlZ3JhdGlvbiB0ZXN0cyAuLi4iCglARVJMX0xJQlM9JChFUkxfTElCUykgZXJsIC1wYSAuZXVuaXQgLW5vc2hlbGwgXAoJLWV2YWwgImV1bml0OnRlc3Qoe2lucGFyYWxsZWwsW1wKCQlgbHMgLmV1bml0L2ludGVncmF0aW9uKnRlc3RzLmJlYW18IFwKCQlzZWQgLWUgJ3MvLmJlYW0vLyd8IFwKCQlhd2sgJ3twcmludCAiXHgyNyIgJCQxICJceDI3In0nfCBcCgkJc2VkICc6YTtOOyQkIWJhO3MvXG4vLC9nJ2BdfSxbdmVyYm9zZV0pIiBcCgktcyBpbml0IHN0b3AKCmNoZWNrLXN5c3RlbToKCUBlY2hvICJCdWlsZGluZyBhbmQgcnVubmluZyBzeXN0ZW0gdGVzdHMgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpIGVybCAtcGEgLmV1bml0IC1ub3NoZWxsIFwKCS1ldmFsICJldW5pdDp0ZXN0KHtpbnBhcmFsbGVsLFtcCgkJYGxzIC5ldW5pdC9zeXN0ZW0qdGVzdHMuYmVhbXwgXAoJCXNlZCAtZSAncy8uYmVhbS8vJ3wgXAoJCWF3ayAne3ByaW50ICJceDI3IiAkJDEgIlx4MjcifSd8IFwKCQlzZWQgJzphO047JCQhYmE7cy9cbi8sL2cnYF19LFt2ZXJib3NlXSkiIFwKCS1zIGluaXQgc3RvcAoKY2hlY2s6IGNvbXBpbGUgY29tcGlsZS10ZXN0cyBjaGVjay11bml0IGNoZWNrLWludGVncmF0aW9uIGNoZWNrLXN5c3RlbQoKY2hlY2stbm8tZGVwczogY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMKCUBjbGVhcgoJQGVjaG8gIlJ1bm5pbmcgdW5pdCB0ZXN0cyAuLi4iCglAcmViYXIgZXVuaXQgdmVyYm9zZT0xIHNraXBfZGVwcz10cnVlCgpwdXNoLWFsbDoKCUBlY2hvICJQdXNpbmcgY29kZSB0byBnaXRodWIgLi4uIgoJZ2l0IHB1c2ggLS1hbGwKCWdpdCBwdXNoIHVwc3RyZWFtIC0tYWxsCglnaXQgcHVzaCAtLXRhZ3MKCWdpdCBwdXNoIHVwc3RyZWFtIC0tdGFncwoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgaW5zdGFsbAojCmluc3RhbGw6IElOU1RBTExESVI9JChzaGVsbCBtYWtlIGdldC1pbnN0YWxsLWRpcikKaW5zdGFsbDogY29tcGlsZQoJQGVjaG8gIkluc3RhbGxpbmcge3tQUk9KRUNUfX0gLi4uIgoJQGlmIFsgIiQkRVJMX0xJQiIgIT0gIiIgXTsgXAoJdGhlbiBta2RpciAtcCAkKElOU1RBTExESVIpLyQoRUJJTik7IFwKCQlta2RpciAtcCAkKElOU1RBTExESVIpLyQoU1JDKTsgXAoJCWNwIC1wUFIgJChFQklOKSAkKElOU1RBTExESVIpOyBcCgkJY3AgLXBQUiAkKFNSQykgJChJTlNUQUxMRElSKTsgXAoJZWxzZSBcCgkJZWNobyAiRVJST1I6IE5vICdFUkxfTElCJyB2YWx1ZSBpcyBzZXQgaW4gdGhlIGVudi4iIFwKCQkmJiBleGl0IDE7IFwKCWZpCgp1cGxvYWQ6ICQoRVhQTSkgZ2V0LXZlcnNpb24KCUBlY2hvICJQcmVwYXJpbmcgdG8gdXBsb2FkIHt7UFJPSkVDVH19IC4uLiIKCUBlY2hvCglAZWNobyAiUGFja2FnZSBmaWxlOiIKCUBlY2hvCglAY2F0IHBhY2thZ2UuZXhzCglAZWNobwoJQGVjaG8gIkNvbnRpbnVlIHdpdGggdXBsb2FkPyAiCglAcmVhZAoJJChFWFBNKSBwdWJsaXNoCg=="
otpmk="aW5jbHVkZSBjb21tb24ubWsKCnJ1bjoKCUBlY2hvICJSdW5uaW5nIE9UUCBhcHAgaW4gdGhlIGZvcmVncm91bmQgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtZXZhbCAiYXBwbGljYXRpb246c3RhcnQoJ3t7UFJPSkVDVH19JykiCgpkYWVtb246CglAZWNobyAiUnVubmluZyBPVFAgYXBwIGluIHRoZSBiYWNrZ3JvdW5kIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgXAoJLWV2YWwgImFwcGxpY2F0aW9uOnN0YXJ0KCd7e1BST0pFQ1R9fScpIiAtZGV0YWNoZWQgLW5vc2hlbGwK"
libmakefile="aW5jbHVkZSBjb21tb24ubWsK"
svcmakefile="aW5jbHVkZSBvdHAubWsK"
travisci="bGFuZ3VhZ2U6IGVybGFuZwpzY3JpcHQ6ICJtYWtlIGNoZWNrLXVuaXQiCm5vdGlmaWNhdGlvbnM6CiAgI2lyYzogImlyYy5mcmVlbm9kZS5vcmcjWU9VUi1QUk9KRUNULUNIQU5ORUwiCiAgcmVjaXBpZW50czoKICAgICMtIFlPVUBZT1VSLkRPTUFJTgpvdHBfcmVsZWFzZToKICAtIFIxNkIwMwogICMtIFIxNUIwMwo="
readme="IyMjIyMjIyMjIyMKe3tQUk9KRUNUfX0KIyMjIyMjIyMjIyMKCkludHJvZHVjdGlvbgo9PT09PT09PT09PT0KCkFkZCBjb250ZW50IHRvIG1lIGhlcmUhCgpEZXBlbmRlbmNpZXMKLS0tLS0tLS0tLS0tCgpUaGlzIHByb2plY3QgYXNzdW1lcyB0aGF0IHlvdSBoYXZlIGByZWJhcmBfIGluc3RhbGxlZCBzb213aGVyZSBpbiB5b3VyCmBgJFBBVEhgYC4KClRoaXMgcHJvamVjdCBkZXBlbmRzIHVwb24gdGhlIGZvbGxvd2luZywgd2hpY2ggaW5zdGFsbGVkIHRvIHRoZSBgYGRlcHNgYApkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0IHdoZW4geW91IHJ1biBgYG1ha2UgZGVwc2BgOgoKKiBgTEZFYF8gKExpc3AgRmxhdm9yZWQgRXJsYW5nOyBuZWVkZWQgb25seSB0byBjb21waWxlKQoqIGBsZmV1bml0YF8gKG5lZWRlZCBvbmx5IHRvIHJ1biB0aGUgdW5pdCB0ZXN0cykKCkluc3RhbGxhdGlvbgo9PT09PT09PT09PT0KCkp1c3QgYWRkIGl0IHRvIHlvdXIgYGByZWJhci5jb25maWdgYCBkZXBzOgoKYGBgZXJsYW5nCiAgICB7ZGVwcywgWwogICAgICAgIC4uLgogICAgICAgIHt7e1BST0pFQ1R9fSwgIi4qIiwge2dpdCwgImdpdEBnaXRodWIuY29tOllPVVJOQU1FL3t7UFJPSkVDVH19LmdpdCIsICJtYXN0ZXIifX0KICAgICAgXX0uCmBgYAoKQW5kIHRoZW4gZG8gdGhlIHVzdWFsOgoKYGBgYmFzaAoKICAgICQgcmViYXIgZ2V0LWRlcHMKICAgICQgcmViYXIgY29tcGlsZQpgYGAKClVzYWdlCj09PT09CgpBZGQgY29udGVudCB0byBtZSBoZXJlIQoKLi4gTGlua3MKLi4gLS0tLS0KLi4gX3JlYmFyOiBodHRwczovL2dpdGh1Yi5jb20vcmViYXIvcmViYXIKLi4gX0xGRTogaHR0cHM6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZQouLiBfbGZldW5pdDogaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV1bml0Cg=="
scriptfile="IyEgL3Vzci9iaW4vZW52IGxmZXNjcmlwdAo7OyAtKi0gbW9kZTogbGZlIC0qLQo7OyEgLXNtcCBlbmFibGUgLXNuYW1lIGZhY3RvcmlhbCAtbW5lc2lhIGRlYnVnIHZlcmJvc2UKKGRlZnVuIG1haW4KICAoKChsaXN0IHN0cmluZykpCiAgICAodHJ5CiAgICAgIChsZXQqICgobiAobGlzdF90b19pbnRlZ2VyIHN0cmluZykpCiAgICAgICAgICAgICAgKGYgKGZhYyBuKSkpCiAgICAgICAgICg6IGxmZV9pbyBmb3JtYXQgJyJmYWN0b3JpYWwgfncgPSB+d1xuIiAobGlzdCBuIGYpKSkKICAgICAgKGNhdGNoCiAgICAgICAgKCh0dXBsZSBfIF8gXykgKHVzYWdlKSkpKSkKICAgICgoXykgKHVzYWdlKSkpCgooZGVmdW4gZmFjCiAgKCgwKSAxKQogICgobikgKCogbiAoZmFjICgtIG4gMSkpKSkpCgooZGVmdW4gdXNhZ2UgKCkKICAobGV0ICgoc2NyaXB0LW5hbWUgKDogZXNjcmlwdCBzY3JpcHRfbmFtZSkpKQogICAgKDogbGZlX2lvIGZvcm1hdCAnInVzYWdlOiB+cyA8aW50ZWdlcj5cbiIgKGxpc3Qgc2NyaXB0LW5hbWUpKSkp"
libappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0nCiAgIF19LAoKICAlJSBBbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbmFtZXMgdGhlIGFwcGxpY2F0aW9uIHVzZXMuIFRoaXMgY2FuIGJlIGlnbm9yZWQuCiAge3JlZ2lzdGVyZWQsIFtdfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0u"
libtestmodule="KGRlZm1vZHVsZSB1bml0LXt7UFJPSkVDVH19LXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBteS1hZGRlcgogIChpcy1lcXVhbCA0ICg6IHt7UFJPSkVDVH19IG15LWFkZGVyIDIgMikpKQo="
libmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkp"
svcappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0tYXBwJywKICAgICd7e1BST0pFQ1R9fS1zZXJ2ZXInLAogICAgJ3t7UFJPSkVDVH19LXN1cCcKICAgXX0sCgogICUlIEFsbCBvZiB0aGUgcmVnaXN0ZXJlZCBuYW1lcyB0aGUgYXBwbGljYXRpb24gdXNlcy4gVGhpcyBjYW4gYmUgaWdub3JlZC4KICB7cmVnaXN0ZXJlZCwgWyd7e1BST0pFQ1R9fS1zdXAnXX0sCgogICUlIEFwcGxpY2F0aW9ucyB0aGF0IGFyZSB0byBiZSBzdGFydGVkIHByaW9yIHRvIHRoaXMgb25lLiBUaGlzIGNhbiBiZSBpZ25vcmVkCiAgJSUgbGVhdmUgaXQgYWxvbmUgdW5sZXNzIHlvdSB1bmRlcnN0YW5kIGl0IHdlbGwgYW5kIGxldCB0aGUgLnJlbCBmaWxlcyBpbgogICUlIHlvdXIgcmVsZWFzZSBoYW5kbGUgdGhpcy4KICB7YXBwbGljYXRpb25zLAogICBbCiAgICBrZXJuZWwsCiAgICBzdGRsaWIKICAgXX0sCgogICUlIE9UUCBhcHBsaWNhdGlvbiBsb2FkZXIgd2lsbCBsb2FkLCBidXQgbm90IHN0YXJ0LCBpbmNsdWRlZCBhcHBzLiBBZ2FpbgogICUlIHRoaXMgY2FuIGJlIGlnbm9yZWQgYXMgd2VsbC4gIFRvIGxvYWQgYnV0IG5vdCBzdGFydCBhbiBhcHBsaWNhdGlvbiBpdAogICUlIGlzIGVhc2llciB0byBpbmNsdWRlIGl0IGluIHRoZSAucmVsIGZpbGUgZm9sbG93ZWQgYnkgdGhlIGF0b20gJ25vbmUnCiAge2luY2x1ZGVkX2FwcGxpY2F0aW9ucywgW119LAoKICAlJQogIHttb2QsIHsne3tQUk9KRUNUfX0tYXBwJywgW119fSwKCiAgJSUgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIHNpbWlsYXIgdG8gdGhvc2UgaW4gdGhlIGNvbmZpZyBmaWxlIHNwZWNpZmllZAogICUlIG9uIHRoZSBjb21tYW5kIGxpbmUuIGNhbiBiZSBmZXRjaGVkIHdpdGggZ2FzOmdldF9lbnYKICB7ZW52LCBbXX0KIF0KfS4K"
svctestmodule="KGRlZm1vZHVsZSB1bml0LXt7UFJPSkVDVH19LXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBjb2RlLWNoYW5nZQogIChpcy1lcXVhbAogICAgOzsgWFhYIFRoaXMgdW5pdCB0ZXN0IGZhaWxzIGJ5IGRlZmF1bHQgLS0gZml4IGl0IQogICAgIyhvayAiZGF0YSIpCiAgICAoOiB7e1BST0pFQ1R9fS1zZXJ2ZXIgY29kZV9jaGFuZ2UKICAgICAgICcib2xkIHZlcnNpb24iCiAgICAgICAnInN0YXRlIgogICAgICAgJyJleHRyYSIpKSkK"
svcapp="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1hcHAKICAoYmVoYXZpb3VyIGFwcGxpY2F0aW9uKQogIChleHBvcnQgKHN0YXJ0IDIpCiAgICAgICAgICAoc3RvcCAxKSkpCgooZGVmdW4gc3RhcnQgKHR5cGUgYXJncykKICAobGV0ICgocmVzdWx0ICg6IHt7UFJPSkVDVH19LXN1cCBzdGFydF9saW5rKSkpCiAgICAoY2FzZSByZXN1bHQKICAgICAgKCh0dXBsZSAnb2sgcGlkKQogICAgICAgIHJlc3VsdCkKICAgICAgKF8KICAgICAgICAodHVwbGUgJ2Vycm9yIHJlc3VsdCkpKSkpCgooZGVmdW4gc3RvcCAoc3RhdGUpCiAgJ29rKQo="
svcserver="Ozs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OzsgQGF1dGhvciAgWU9VUiBOQU1FLCA8WU9VUiBFTUFJTD4KOzs7IEBjb3B5cmlnaHQgKEMpIFlFQVIsCjs7OyBAZG9jCjs7OyAgICAgWU9VUiBQUk9KRUNUIGFwcGxpY2F0aW9uIHNlcnZlcgo7OzsgQGVuZAo7OzsgQ3JlYXRlZCA6IFRPREFZIGJ5IFlPVVIgRU1BSUwKOzs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmbW9kdWxlIHt7UFJPSkVDVH19LXNlcnZlcgogIChiZWhhdmlvdXIgZ2VuX3NlcnZlcikKICA7OyBBUEkKICAoZXhwb3J0IChzdGFydF9saW5rIDApCiAgICAgICAgICAodGVzdC1jYWxsIDEpCiAgICAgICAgICAodGVzdC1jYXN0IDEpKQogIDs7IGdlbl9zZXJ2ZXIgY2FsbGJhY2tzCiAgKGV4cG9ydCAoaW5pdCAxKQogICAgICAgICAgKGhhbmRsZV9jYWxsIDMpCiAgICAgICAgICAoaGFuZGxlX2Nhc3QgMikKICAgICAgICAgIChoYW5kbGVfaW5mbyAyKQogICAgICAgICAgKHRlcm1pbmF0ZSAyKQogICAgICAgICAgKGNvZGVfY2hhbmdlIDMpKSkKCihkZWZyZWNvcmQgc3RhdGUKICAoZGF0YSAodHVwbGUpKSkKCihkZWZ1biBzZXJ2ZXItbmFtZSAoKQogICd7e1BST0pFQ1R9fS1zZXJ2ZXIpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBBUEkKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAZG9jCjs7IFN0YXJ0cyB0aGUgc2VydmVyCjs7Cjs7IEBzcGVjIHN0YXJ0X2xpbmsoKSAtPiB7b2ssIFBpZH0gfCBpZ25vcmUgfCB7ZXJyb3IsIEVycm9yfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIHN0YXJ0X2xpbmsgKCkKICAoOiBnZW5fc2VydmVyIHN0YXJ0X2xpbmsKICAgICAodHVwbGUgJ2xvY2FsIChzZXJ2ZXItbmFtZSkpIChNT0RVTEUpICcoKSAnKCkpKQoKKGRlZnVuIHRlc3QtY2FsbCAobWVzc2FnZSkKICAoOiBnZW5fc2VydmVyIGNhbGwKICAgICAoc2VydmVyLW5hbWUpICh0dXBsZSAndGVzdCBtZXNzYWdlKSkpCgooZGVmdW4gdGVzdC1jYXN0IChtZXNzYWdlKQogICg6IGdlbl9zZXJ2ZXIgY2FzdAogICAgIChzZXJ2ZXItbmFtZSkgKHR1cGxlICd0ZXN0IG1lc3NhZ2UpKSkKCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KOzs7IGdlbl9zZXJ2ZXIgY2FsbGJhY2tzCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBJbml0aWFsaXplcyB0aGUgc2VydmVyCjs7Cjs7IEBzcGVjIGluaXQoQXJncykgLT4ge29rLCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgIHtvaywgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICBpZ25vcmUgfAo7OyAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb259Cjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gaW5pdCAoYXJncykKICAodHVwbGUgJ29rIChtYWtlLXN0YXRlKSkpCgoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGNhbGwgbWVzc2FnZXMKOzsKOzsgQHNwZWMgaGFuZGxlX2NhbGwoUmVxdWVzdCwgRnJvbSwgU3RhdGUpIC0+Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cmVwbHksIFJlcGx5LCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlcGx5LCBSZXBseSwgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZX0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25vcmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBSZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9jYWxsCiAgKCgodHVwbGUgJ3Rlc3QgbWVzc2FnZSkgZnJvbSBzdGF0ZSkKICAgICg6IGxmZV9pbyBmb3JtYXQgJyJDYWxsOiB+cH5uIiAobGlzdCBtZXNzYWdlKSkKICAgICh0dXBsZSAncmVwbHkgJ29rIHN0YXRlKSkKICAoKHJlcXVlc3QgZnJvbSBzdGF0ZSkKICAgICh0dXBsZSAncmVwbHkgJ29rIHN0YXRlKSkpCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgSGFuZGxpbmcgY2FzdCBtZXNzYWdlcwo7Owo7OyBAc3BlYyBoYW5kbGVfY2FzdChNc2csIFN0YXRlKSAtPiB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge25vcmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9jYXN0CiAgKCgodHVwbGUgJ3Rlc3QgbWVzc2FnZSkgc3RhdGUpCiAgICAoOiBsZmVfaW8gZm9ybWF0ICciQ2FzdDogfnB+biIgKGxpc3QgbWVzc2FnZSkpCiAgICAodHVwbGUgJ25vcmVwbHkgc3RhdGUpKQogICgobWVzc2FnZSBzdGF0ZSkKICAgICh0dXBsZSAnbm9yZXBseSBzdGF0ZSkpKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGFsbCBub24gY2FsbC9jYXN0IG1lc3NhZ2VzCjs7Cjs7IEBzcGVjIGhhbmRsZV9pbmZvKEluZm8sIFN0YXRlKSAtPiB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0b3AsIFJlYXNvbiwgU3RhdGV9Cjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gaGFuZGxlX2luZm8gKGluZm8gc3RhdGUpCiAgKHR1cGxlICdub3JlcGx5IHN0YXRlKSkKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBUaGlzIGZ1bmN0aW9uIGlzIGNhbGxlZCBieSBhIGdlbl9zZXJ2ZXIgd2hlbiBpdCBpcyBhYm91dCB0bwo7OyB0ZXJtaW5hdGUuIEl0IHNob3VsZCBiZSB0aGUgb3Bwb3NpdGUgb2YgTW9kdWxlOmluaXQvMSBhbmQgZG8gYW55Cjs7IG5lY2Vzc2FyeSBjbGVhbmluZyB1cC4gV2hlbiBpdCByZXR1cm5zLCB0aGUgZ2VuX3NlcnZlciB0ZXJtaW5hdGVzCjs7IHdpdGggUmVhc29uLiBUaGUgcmV0dXJuIHZhbHVlIGlzIGlnbm9yZWQuCjs7Cjs7IEBzcGVjIHRlcm1pbmF0ZShSZWFzb24sIFN0YXRlKSAtPiB2b2lkKCkKOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biB0ZXJtaW5hdGUgKHJlYXNvbiBzdGF0ZSkKICAnb2spCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgQ29udmVydCBwcm9jZXNzIHN0YXRlIHdoZW4gY29kZSBpcyBjaGFuZ2VkCjs7Cjs7IEBzcGVjIGNvZGVfY2hhbmdlKE9sZFZzbiwgU3RhdGUsIEV4dHJhKSAtPiB7b2ssIE5ld1N0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGNvZGVfY2hhbmdlIChvbGQtdmVyc2lvbiBzdGF0ZSBleHRyYSkKICAodHVwbGUgJ29rIHN0YXRlKSkKCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KOzs7IEludGVybmFsIGZ1bmN0aW9ucwo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cg=="
svcsup="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1zdXAKICAoYmVoYXZpb3VyIHN1cGVydmlzb3IpCiAgOzsgQVBJCiAgKGV4cG9ydCAoc3RhcnRfbGluayAwKSkKICA7OyBTdXBlcnZpc29yIGNhbGxiYWNrcwogIChleHBvcnQgKGluaXQgMSkpKQoKKGRlZnVuIHNlcnZlci1uYW1lICgpCiAgJ3t7UFJPSkVDVH19LXN1cCkKCihkZWZ1biBzdGFydF9saW5rICgpCiAgKDogc3VwZXJ2aXNvciBzdGFydF9saW5rCiAgICAodHVwbGUgJ2xvY2FsIChzZXJ2ZXItbmFtZSkpIChNT0RVTEUpICcoKSkpCgooZGVmdW4gaW5pdCAoYXJncykKICAobGV0KiAoKHNlcnZlciAodHVwbGUKICAgICAgICAgICAgICAgICAgICd7e1BST0pFQ1R9fS1zZXJ2ZXIKICAgICAgICAgICAgICAgICAgICh0dXBsZSAne3tQUk9KRUNUfX0tc2VydmVyICdzdGFydF9saW5rICcoKSkKICAgICAgICAgICAgICAgICAgICdwZXJtYW5lbnQKICAgICAgICAgICAgICAgICAgIDIwMDAKICAgICAgICAgICAgICAgICAgICd3b3JrZXIKICAgICAgICAgICAgICAgICAgIChsaXN0ICd7e1BST0pFQ1R9fS1zZXJ2ZXIpCiAgICAgICAgICAgICAgICAgICApKQogICAgICAgICAoY2hpbGRyZW4gKGxpc3Qgc2VydmVyKSkKICAgICAgICAgKHJlc3RhcnQtc3RyYXRlZ3kgKHR1cGxlICdvbmVfZm9yX29uZSAzIDEpKSkKICAgICh0dXBsZSAnb2sgKHR1cGxlIHJlc3RhcnQtc3RyYXRlZ3kgY2hpbGRyZW4pKSkpCg=="

decode () {
    os=`uname`
    case $os in
        Darwin)
            base64 -D
            ;;
        *)
            base64 -d
            ;;
    esac
}

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | decode
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

get-separator () {
    local project=$1
    case "$project" in
        *_*) local char="_" ;;
        *) local char="-" ;;
    esac
    echo -n $char
}

create-dirs () {
    local project=$1
    mkdir -p $project/src \
        $project/test/unit \
        $project/test/integration \
        $project/test/system
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    if [ "$pattern" = "" ]; then
        pattern="{{NOOP}}"
        project="{{NOOP}}"
    fi
    echo $data | decode | sed \
        -e "s/$pattern/$project/" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$commonmk" $project/common.mk {{PROJECT}} $project
    create-file "$travisci" $project/.travis.yml {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$package" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/unit/unit$(get-separator $project)${project}$(get-separator $project)tests.lfe \
        {{PROJECT}} $project
    create-file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    create-file "$otpmk" $project/otp.mk {{PROJECT}} $project
    create-file "$svcmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$svctestmodule" \
        $project/test/unit/unit$(get-separator $project)${project}$(get-separator $project)tests.lfe \
        {{PROJECT}} $project
    create-file "$svcapp" \
        $project/src/${project}$(get-separator $project)app.lfe \
        {{PROJECT}} $project
    create-file "$svcserver" \
        $project/src/${project}$(get-separator $project)server.lfe \
        {{PROJECT}} $project
    create-file "$svcsup" \
        $project/src/${project}$(get-separator $project)sup.lfe \
        {{PROJECT}} $project
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-service-project () {
    echo "Setting up starter OTP service project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-service-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-e2-service-project () {
    #echo "Setting up starter e2 service project ..."
    local project=$1
    not-implemented-error
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    local context=$1
    local arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg=$3

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg
            create-new $context $arg
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@
