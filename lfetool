#!/bin/bash

version=0.1.1

gitignore="ZGVwcwoqLnN1YmxpbWUtcHJvamVjdAoqLnN1YmxpbWUtd29ya3NwYWNlCiouYmVhbQouZXVuaXQKZGVidWctKgplYmluLyoKYmluL2V4cG0K"
usage="U2NyaXB0OiB7e1NDUklQVH19LCB2JHZlcnNpb24KVXNhZ2U6ICRmdWxscGF0aCA8Y29tbWFuZD4gPGNvbnRleHQ+IDxhcmc+IHwgPG9wdGlvbnM+CgpDdXJyZW50bHksICRzY3JpcHQgc3VwcG9ydHMgdGhlc2UgY29tbWFuZHM6CiAqIGhlbHAKICogdmVyc2lvbgogKiBpbnN0YWxsCiAqIHVwZGF0ZQogKiBuZXcKCkFkZGl0aW9uYWxseSwgaW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tbWFuZCwgeW91IG1heSBjaG9vc2UgdG8gcnVuIHRoZSBzY3JpcHQKd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgogLWggICAgZGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2UgYW5kIGV4aXQKIC12ICAgIGRpc3BsYXkgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBleGl0CgpUaGVzZSBjb21tYW5kcyBhcmUgZG9jdW1lbnRlZCBvbiB0aGUgcHJvamVjdCBwYWdlIGhlcmU6CiAgaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV0b29sCg=="
rebarconfig="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QiXX1dfS4Ke2xmZV9maXJzdF9maWxlcywgW119Lgp7ZGVwc19kaXIsIFsiZGVwcyJdfS4Ke3BsdWdpbnMsIFsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nXX0uCntldW5pdF9jb21waWxlX29wdHMsIFsKICAge3NyY19kaXJzLCBbInRlc3QiLCAic3JjIl19CiAgXX0uCntkZXBzLCBbCiAgIHtsZmUsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZS5naXQiLCAiZGV2ZWxvcCJ9fSwKICAgeydsZmUtdXRpbHMnLCAiLioiLCB7Z2l0LCAiaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmUtdXRpbHMuZ2l0IiwgIm1hc3RlciJ9fSwKICAge2xmZXVuaXQsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL2xmZS9sZmV1bml0LmdpdCIsICJtYXN0ZXIifX0sCiAgIHsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nLAogICAgICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL291Yml3YW5uL2xmZS1zYW1wbGUtcmViYXItcGx1Z2luLmdpdCIsCiAgICAgIm1hc3RlciJ9fQogIF19Lgo="
package="RXhwbS5QYWNrYWdlLm5ldygKICBuYW1lOiAie3tQUk9KRUNUfX0iLAogIGRlc2NyaXB0aW9uOiAie3tQUk9KRUNUfX0gREVTQ1JJUFRJT04iLAogIHZlcnNpb246ICIwLjAuMSIsCiAga2V5d29yZHM6IFsiTEZFIiwgIkxpc3AiLCAiTGlicmFyeSIsICJBUEkiXSwKICBtYWludGFpbmVyczogW1tuYW1lOiAiWU9VUiBOQU1FIiwgZW1haWw6ICJZT1VSQEVNQUlMLmNvbSJdXSwKICByZXBvc2l0b3JpZXM6IFtbZ2l0aHViOiAiWU9VUl9HSVRIVUJfTkFNRS97e1BST0pFQ1R9fV1dKQo="
makefile="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoTEZFX0RJUik6JChMRkVfVVRJTFNfRElSKTokKExGRVVOSVRfRElSKTouLwpTT1VSQ0VfRElSID0gLi9zcmMKT1VUX0RJUiA9IC4vZWJpbgpURVNUX0RJUiA9IC4vdGVzdApURVNUX09VVF9ESVIgPSAuLy5ldW5pdApGSU5JU0ggPSAtcnVuIGluaXQgc3RvcCAtbm9zaGVsbAoKZ2V0LXZlcnNpb246CglAZWNobwoJQGVjaG8gIkdldHRpbmcgdmVyc2lvbiBpbmZvIC4uLiIKCUBlY2hvCglAZWNobyAtbiBhcHAuc3JjOiAnJwoJQGVybCAtZXZhbCAnaW86Zm9ybWF0KCJ+cH5uIiwgWyBcCgkJcHJvcGxpc3RzOmdldF92YWx1ZSh2c24sZWxlbWVudCgzLGVsZW1lbnQoMixoZChlbGVtZW50KDMsIFwKCQllcmxfZXZhbDpleHBycyhlbGVtZW50KDIsIGVybF9wYXJzZTpwYXJzZV9leHBycyhlbGVtZW50KDIsIFwKCQllcmxfc2NhbjpzdHJpbmcoIkRhdGEgPSAiICsrIGJpbmFyeV90b19saXN0KGVsZW1lbnQoMiwgXAoJCWZpbGU6cmVhZF9maWxlKCJzcmMvJChMSUIpLmFwcC5zcmMiKSkpKSkpKSwgW10pKSkpKSldKScgXAoJCSQoRklOSVNIKQoJQGVjaG8gLW4gcGFja2FnZS5leHM6ICcnCglAZ3JlcCB2ZXJzaW9uIHBhY2thZ2UuZXhzIHxhd2sgJ3twcmludCAkJDJ9J3xzZWQgLWUgJ3MvLC8vZycKCiMgTm90ZSB0aGF0IHRoaXMgbWFrZSB0YXJnZXQgZXhwZWN0cyB0byBiZSB1c2VkIGxpa2Ugc286CiMgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgZ2V0LWluc3RhbGwtZGlyCiMKIyBXaGljaCB3b3VsZCBnaXZlIHRoZSBmb2xsb3dpbmcgcmVzdWx0OgojICAgc29tZS9wYXRoLyRwcm9qZWN0LTEuMC4wCiMKZ2V0LWluc3RhbGwtZGlyOgoJQGVjaG8gJChFUkxfTElCKS8kKFBST0pFQ1QpLSQoc2hlbGwgbWFrZSBnZXQtdmVyc2lvbikKCiQoQklOX0RJUik6Cglta2RpciAtcCAkKEJJTl9ESVIpCgokKEVYUE0pOiAkKEJJTl9ESVIpCgljdXJsIC1vICQoRVhQTSkgaHR0cDovL2V4cG0uY28vX19kb3dubG9hZF9fL2V4cG0KCWNobW9kICt4ICQoRVhQTSkKCmdldC1kZXBzOgoJcmViYXIgZ2V0LWRlcHMKCWZvciBESVIgaW4gJCh3aWxkY2FyZCAkKERFUFMpLyopOyBcCglkbyBjZCAkJERJUjsgZWNobyAiVXBkYXRpbmcgJCRESVIgLi4uIjsgXAoJZ2l0IHB1bGw7IGNkIC0gPiAvZGV2L251bGw7IGRvbmUKCmNsZWFuLWViaW46CglybSAtZiAkKE9VVF9ESVIpLyouYmVhbQoKY2xlYW4tZXVuaXQ6CglybSAtcmYgJChURVNUX09VVF9ESVIpCgpjb21waWxlOiBnZXQtZGVwcyBjbGVhbi1lYmluCglyZWJhciBjb21waWxlCgpjb21waWxlLW5vLWRlcHM6IGNsZWFuLWViaW4KCXJlYmFyIGNvbXBpbGUgc2tpcF9kZXBzPXRydWUKCmNvbXBpbGUtdGVzdHM6IGNsZWFuLWV1bml0Cglta2RpciAtcCAkKFRFU1RfT1VUX0RJUikKCUVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFQykgLW8gJChURVNUX09VVF9ESVIpICQoVEVTVF9ESVIpLypbXy1ddGVzdHMubGZlCgktRVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKE9VVF9ESVIpICQoVEVTVF9ESVIpL3Rlc3RpbmdbLV9dKi5sZmUKCnNoZWxsOiBjb21waWxlCgljbGVhcgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtcGEgJChURVNUX09VVF9ESVIpCgpzaGVsbC1uby1kZXBzOiBjb21waWxlLW5vLWRlcHMKCWNsZWFyCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkUpIC1wYSAkKFRFU1RfT1VUX0RJUikKCmNsZWFuOiBjbGVhbi1lYmluIGNsZWFuLWV1bml0CglyZWJhciBjbGVhbgoKY2hlY2s6IGNvbXBpbGUgY29tcGlsZS10ZXN0cwoJQGNsZWFyOwoJQHJlYmFyIGV1bml0IHZlcmJvc2U9MSBza2lwX2RlcHM9dHJ1ZQoKY2hlY2stbm8tZGVwczogY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMKCUBjbGVhcjsKCUByZWJhciBldW5pdCB2ZXJib3NlPTEgc2tpcF9kZXBzPXRydWUKCnJ1bjoKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgLWV2YWwgImFwcGxpY2F0aW9uOnN0YXJ0KCd7e1BST0pFQ1R9fScpIgoKZGFlbW9uOgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSBcCgktZXZhbCAiYXBwbGljYXRpb246c3RhcnQoJ3t7UFJPSkVDVH19JykiIC1kZXRhY2hlZCAtbm9zaGVsbAoKcHVzaC1hbGw6CglnaXQgcHVzaCAtLWFsbAoJZ2l0IHB1c2ggdXBzdHJlYW0gLS1hbGwKCWdpdCBwdXNoIC0tdGFncwoJZ2l0IHB1c2ggdXBzdHJlYW0gLS10YWdzCgojIE5vdGUgdGhhdCB0aGlzIG1ha2UgdGFyZ2V0IGV4cGVjdHMgdG8gYmUgdXNlZCBsaWtlIHNvOgojICAgICQgRVJMX0xJQj1zb21lL3BhdGggbWFrZSBpbnN0YWxsCiMKaW5zdGFsbDogSU5TVEFMTERJUj0kKHNoZWxsIG1ha2UgZ2V0LWluc3RhbGwtZGlyKQppbnN0YWxsOiBjb21waWxlCglpZiBbICIkJEVSTF9MSUIiICE9ICIiIF07IFwKCXRoZW4gbWtkaXIgLXAgJChJTlNUQUxMRElSKS8kKEVCSU4pOyBcCgkJbWtkaXIgLXAgJChJTlNUQUxMRElSKS8kKFNSQyk7IFwKCQljcCAtcFBSICQoRUJJTikgJChJTlNUQUxMRElSKTsgXAoJCWNwIC1wUFIgJChTUkMpICQoSU5TVEFMTERJUik7IFwKCWVsc2UgXAoJCWVjaG8gIkVSUk9SOiBObyAnRVJMX0xJQicgdmFsdWUgaXMgc2V0IGluIHRoZSBlbnYuIiBcCgkJJiYgZXhpdCAxOyBcCglmaQoKdXBsb2FkOiAkKEVYUE0pIGdldC12ZXJzaW9uCglAZWNobyAiUGFja2FnZSBmaWxlOiIKCUBlY2hvCglAY2F0IHBhY2thZ2UuZXhzCglAZWNobwoJQGVjaG8gIkNvbnRpbnVlIHdpdGggdXBsb2FkPyAiCglAcmVhZAoJJChFWFBNKSBwdWJsaXNoCg=="
readme="IyMjIyMjIyMjIyMKe3tQUk9KRUNUfX0KIyMjIyMjIyMjIyMKCkludHJvZHVjdGlvbgo9PT09PT09PT09PT0KCkFkZCBjb250ZW50IHRvIG1lIGhlcmUhCgpEZXBlbmRlbmNpZXMKLS0tLS0tLS0tLS0tCgpUaGlzIHByb2plY3QgYXNzdW1lcyB0aGF0IHlvdSBoYXZlIGByZWJhcmBfIGluc3RhbGxlZCBzb213aGVyZSBpbiB5b3VyCmBgJFBBVEhgYC4KClRoaXMgcHJvamVjdCBkZXBlbmRzIHVwb24gdGhlIGZvbGxvd2luZywgd2hpY2ggaW5zdGFsbGVkIHRvIHRoZSBgYGRlcHNgYApkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0IHdoZW4geW91IHJ1biBgYG1ha2UgZGVwc2BgOgoKKiBgTEZFYF8gKExpc3AgRmxhdm9yZWQgRXJsYW5nOyBuZWVkZWQgb25seSB0byBjb21waWxlKQoqIGBsZmV1bml0YF8gKG5lZWRlZCBvbmx5IHRvIHJ1biB0aGUgdW5pdCB0ZXN0cykKCkluc3RhbGxhdGlvbgo9PT09PT09PT09PT0KCkFkZCBjb250ZW50IHRvIG1lIGhlcmUhCgpVc2FnZQo9PT09PQoKQWRkIGNvbnRlbnQgdG8gbWUgaGVyZSEKCi4uIExpbmtzCi4uIC0tLS0tCi4uIF9yZWJhcjogaHR0cHM6Ly9naXRodWIuY29tL3JlYmFyL3JlYmFyCi4uIF9MRkU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ydmlyZGluZy9sZmUKLi4gX2xmZXVuaXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9sZmUvbGZldW5pdA=="
scriptfile="IyEgL3Vzci9iaW4vZW52IGxmZXNjcmlwdAo7OyAtKi0gbW9kZTogbGZlIC0qLQo7OyEgLXNtcCBlbmFibGUgLXNuYW1lIGZhY3RvcmlhbCAtbW5lc2lhIGRlYnVnIHZlcmJvc2UKKGRlZnVuIG1haW4KICAoKChsaXN0IHN0cmluZykpCiAgICAodHJ5CiAgICAgIChsZXQqICgobiAobGlzdF90b19pbnRlZ2VyIHN0cmluZykpCiAgICAgICAgICAgICAgKGYgKGZhYyBuKSkpCiAgICAgICAgICg6IGxmZV9pbyBmb3JtYXQgJyJmYWN0b3JpYWwgfncgPSB+d1xuIiAobGlzdCBuIGYpKSkKICAgICAgKGNhdGNoCiAgICAgICAgKCh0dXBsZSBfIF8gXykgKHVzYWdlKSkpKSkKICAgICgoXykgKHVzYWdlKSkpCgooZGVmdW4gZmFjCiAgKCgwKSAxKQogICgobikgKCogbiAoZmFjICgtIG4gMSkpKSkpCgooZGVmdW4gdXNhZ2UgKCkKICAobGV0ICgoc2NyaXB0LW5hbWUgKDogZXNjcmlwdCBzY3JpcHRfbmFtZSkpKQogICAgKDogbGZlX2lvIGZvcm1hdCAnInVzYWdlOiB+cyA8aW50ZWdlcj5cbiIgKGxpc3Qgc2NyaXB0LW5hbWUpKSkp"
libappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0nCiAgIF19LAoKICAlJSBBbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbmFtZXMgdGhlIGFwcGxpY2F0aW9uIHVzZXMuIFRoaXMgY2FuIGJlIGlnbm9yZWQuCiAge3JlZ2lzdGVyZWQsIFtdfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0u"
libtestmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBteS1hZGRlcgogIChpcy1lcXVhbCA0ICg6IHt7UFJPSkVDVH19IG15LWFkZGVyIDIgMikpKQo="
libmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkp"
svcappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1hcHAnLAogICAgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyJywKICAgICd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cCcKICAgXX0sCgogICUlIEFsbCBvZiB0aGUgcmVnaXN0ZXJlZCBuYW1lcyB0aGUgYXBwbGljYXRpb24gdXNlcy4gVGhpcyBjYW4gYmUgaWdub3JlZC4KICB7cmVnaXN0ZXJlZCwgWyd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cCddfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlCiAge21vZCwgeyd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fWFwcCcsIFtdfX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0uCg=="
svctestmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBjb2RlLWNoYW5nZQogIChpcy1lcXVhbAogICAgOzsgWFhYIFRoaXMgdW5pdCB0ZXN0IGZhaWxzIGJ5IGRlZmF1bHQgLS0gZml4IGl0IQogICAgIyhvayAiZGF0YSIpCiAgICAoOiB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXNlcnZlciBjb2RlLWNoYW5nZQogICAgICAgJyJvbGQgdmVyc2lvbiIKICAgICAgICcic3RhdGUiCiAgICAgICAnImV4dHJhIikpKQo="
svcapp="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fWFwcAogIChiZWhhdmlvdXIgYXBwbGljYXRpb24pCiAgKGV4cG9ydCAoc3RhcnQgMikKICAgICAgICAgIChzdG9wIDEpKSkKCihkZWZ1biBzdGFydCAodHlwZSBhcmdzKQogIChsZXQgKChyZXN1bHQgKDoge3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zdXAgc3RhcnRfbGluaykpKQogICAgKGNhc2UgcmVzdWx0CiAgICAgICgodHVwbGUgJ29rIHBpZCkKICAgICAgICByZXN1bHQpCiAgICAgIChfCiAgICAgICAgKHR1cGxlICdlcnJvciByZXN1bHQpKSkpKQoKKGRlZnVuIHN0b3AgKHN0YXRlKQogICdvaykK"
svcserver="Ozs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OzsgQGF1dGhvciAgWU9VUiBOQU1FLCA8WU9VUiBFTUFJTD4KOzs7IEBjb3B5cmlnaHQgKEMpIFlFQVIsCjs7OyBAZG9jCjs7OyAgICAgWU9VUiBQUk9KRUNUIGFwcGxpY2F0aW9uIHNlcnZlcgo7OzsgQGVuZAo7OzsgQ3JlYXRlZCA6IFRPREFZIGJ5IFlPVVIgRU1BSUwKOzs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmbW9kdWxlIHt7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyCiAgKGJlaGF2aW91ciBnZW5fc2VydmVyKQogIDs7IEFQSQogIChleHBvcnQgKHN0YXJ0X2xpbmsgMCkKICAgICAgICAgICh0ZXN0LWNhbGwgMSkKICAgICAgICAgICh0ZXN0LWNhc3QgMSkpCiAgOzsgZ2VuX3NlcnZlciBjYWxsYmFja3MKICAoZXhwb3J0IChpbml0IDEpCiAgICAgICAgICAoaGFuZGxlX2NhbGwgMykKICAgICAgICAgIChoYW5kbGVfY2FzdCAyKQogICAgICAgICAgKGhhbmRsZV9pbmZvIDIpCiAgICAgICAgICAodGVybWluYXRlIDIpCiAgICAgICAgICAoY29kZV9jaGFuZ2UgMykpKQoKKGRlZnJlY29yZCBzdGF0ZQogIChkYXRhICh0dXBsZSkpKQoKKGRlZnVuIHNlcnZlci1uYW1lICgpCiAgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyKQoKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQo7OzsgQVBJCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQGRvYwo7OyBTdGFydHMgdGhlIHNlcnZlcgo7Owo7OyBAc3BlYyBzdGFydF9saW5rKCkgLT4ge29rLCBQaWR9IHwgaWdub3JlIHwge2Vycm9yLCBFcnJvcn0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBzdGFydF9saW5rICgpCiAgKDogZ2VuX3NlcnZlciBzdGFydF9saW5rCiAgICAgKHR1cGxlICdsb2NhbCAoc2VydmVyLW5hbWUpKSAoTU9EVUxFKSAnKCkgJygpKSkKCihkZWZ1biB0ZXN0LWNhbGwgKG1lc3NhZ2UpCiAgKDogZ2VuX3NlcnZlciBjYWxsCiAgICAgKHNlcnZlci1uYW1lKSAodHVwbGUgJ3Rlc3QgbWVzc2FnZSkpKQoKKGRlZnVuIHRlc3QtY2FzdCAobWVzc2FnZSkKICAoOiBnZW5fc2VydmVyIGNhc3QKICAgICAoc2VydmVyLW5hbWUpICh0dXBsZSAndGVzdCBtZXNzYWdlKSkpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBnZW5fc2VydmVyIGNhbGxiYWNrcwo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgSW5pdGlhbGl6ZXMgdGhlIHNlcnZlcgo7Owo7OyBAc3BlYyBpbml0KEFyZ3MpIC0+IHtvaywgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICB7b2ssIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgaWdub3JlIHwKOzsgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29ufQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGluaXQgKGFyZ3MpCiAgKHR1cGxlICdvayAobWFrZS1zdGF0ZSkpKQoKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBIYW5kbGluZyBjYWxsIG1lc3NhZ2VzCjs7Cjs7IEBzcGVjIGhhbmRsZV9jYWxsKFJlcXVlc3QsIEZyb20sIFN0YXRlKSAtPgo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlcGx5LCBSZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXBseSwgUmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0b3AsIFJlYXNvbiwgUmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBoYW5kbGVfY2FsbAogICgoKHR1cGxlICd0ZXN0IG1lc3NhZ2UpIGZyb20gc3RhdGUpCiAgICAoOiBsZmVfaW8gZm9ybWF0ICciQ2FsbDogfnB+biIgKGxpc3QgbWVzc2FnZSkpCiAgICAodHVwbGUgJ3JlcGx5ICdvayBzdGF0ZSkpCiAgKChyZXF1ZXN0IGZyb20gc3RhdGUpCiAgICAodHVwbGUgJ3JlcGx5ICdvayBzdGF0ZSkpKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGNhc3QgbWVzc2FnZXMKOzsKOzsgQHNwZWMgaGFuZGxlX2Nhc3QoTXNnLCBTdGF0ZSkgLT4ge25vcmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBoYW5kbGVfY2FzdAogICgoKHR1cGxlICd0ZXN0IG1lc3NhZ2UpIHN0YXRlKQogICAgKDogbGZlX2lvIGZvcm1hdCAnIkNhc3Q6IH5wfm4iIChsaXN0IG1lc3NhZ2UpKQogICAgKHR1cGxlICdub3JlcGx5IHN0YXRlKSkKICAoKG1lc3NhZ2Ugc3RhdGUpCiAgICAodHVwbGUgJ25vcmVwbHkgc3RhdGUpKSkKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBIYW5kbGluZyBhbGwgbm9uIGNhbGwvY2FzdCBtZXNzYWdlcwo7Owo7OyBAc3BlYyBoYW5kbGVfaW5mbyhJbmZvLCBTdGF0ZSkgLT4ge25vcmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bm9yZXBseSwgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9pbmZvIChpbmZvIHN0YXRlKQogICh0dXBsZSAnbm9yZXBseSBzdGF0ZSkpCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgYSBnZW5fc2VydmVyIHdoZW4gaXQgaXMgYWJvdXQgdG8KOzsgdGVybWluYXRlLiBJdCBzaG91bGQgYmUgdGhlIG9wcG9zaXRlIG9mIE1vZHVsZTppbml0LzEgYW5kIGRvIGFueQo7OyBuZWNlc3NhcnkgY2xlYW5pbmcgdXAuIFdoZW4gaXQgcmV0dXJucywgdGhlIGdlbl9zZXJ2ZXIgdGVybWluYXRlcwo7OyB3aXRoIFJlYXNvbi4gVGhlIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLgo7Owo7OyBAc3BlYyB0ZXJtaW5hdGUoUmVhc29uLCBTdGF0ZSkgLT4gdm9pZCgpCjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gdGVybWluYXRlIChyZWFzb24gc3RhdGUpCiAgJ29rKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IENvbnZlcnQgcHJvY2VzcyBzdGF0ZSB3aGVuIGNvZGUgaXMgY2hhbmdlZAo7Owo7OyBAc3BlYyBjb2RlX2NoYW5nZShPbGRWc24sIFN0YXRlLCBFeHRyYSkgLT4ge29rLCBOZXdTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBjb2RlX2NoYW5nZSAob2xkLXZlcnNpb24gc3RhdGUgZXh0cmEpCiAgKHR1cGxlICdvayBzdGF0ZSkpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBJbnRlcm5hbCBmdW5jdGlvbnMKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQo="
svcsup="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cAogIChiZWhhdmlvdXIgc3VwZXJ2aXNvcikKICA7OyBBUEkKICAoZXhwb3J0IChzdGFydF9saW5rIDApKQogIDs7IFN1cGVydmlzb3IgY2FsbGJhY2tzCiAgKGV4cG9ydCAoaW5pdCAxKSkpCgooZGVmdW4gc2VydmVyLW5hbWUgKCkKICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zdXApCgooZGVmdW4gc3RhcnRfbGluayAoKQogICg6IHN1cGVydmlzb3Igc3RhcnRfbGluawogICAgKHR1cGxlICdsb2NhbCAoc2VydmVyLW5hbWUpKSAoTU9EVUxFKSAnKCkpKQoKKGRlZnVuIGluaXQgKGFyZ3MpCiAgKGxldCogKChzZXJ2ZXIgKHR1cGxlCiAgICAgICAgICAgICAgICAgICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zZXJ2ZXIKICAgICAgICAgICAgICAgICAgICh0dXBsZSAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zZXJ2ZXIgJ3N0YXJ0X2xpbmsgJygpKQogICAgICAgICAgICAgICAgICAgJ3Blcm1hbmVudAogICAgICAgICAgICAgICAgICAgMjAwMAogICAgICAgICAgICAgICAgICAgJ3dvcmtlcgogICAgICAgICAgICAgICAgICAgKGxpc3QgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyKQogICAgICAgICAgICAgICAgICAgKSkKICAgICAgICAgKGNoaWxkcmVuIChsaXN0IHNlcnZlcikpCiAgICAgICAgIChyZXN0YXJ0LXN0cmF0ZWd5ICh0dXBsZSAnb25lX2Zvcl9vbmUgMyAxKSkpCiAgICAodHVwbGUgJ29rICh0dXBsZSByZXN0YXJ0LXN0cmF0ZWd5IGNoaWxkcmVuKSkpKQo="

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | base64 -D
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

create-dirs () {
    local project=$1
    mkdir -p $project/src $project/test
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    local joinchar=$(dash-or-underscore-char $project)
    local joinpattern="{{JOINCHAR}}"
    if [ "$pattern" = "" ]; then
        pattern="{{NOOP}}"
        project="{{NOOP}}"
        joinpattern="{{NOOP}}"
    fi
    echo $data | base64 -D | sed -e "s/$joinpattern/$joinchar/" -e "s/$pattern/$project/" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$makefile" $project/Makefile {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$package" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/${project}$(dash-or-underscore-char $project)tests.lfe {{PROJECT}} $project
    create-file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$svctestmodule" \
        $project/test/${project}$(dash-or-underscore-char $project)tests.lfe {{PROJECT}} $project
    create-file "$svcapp" $project/src/${project}$(dash-or-underscore-char $project)app.lfe {{PROJECT}} $project
    create-file "$svcserver" $project/src/${project}$(dash-or-underscore-char $project)server.lfe {{PROJECT}} $project
    create-file "$svcsup" $project/src/${project}$(dash-or-underscore-char $project)sup.lfe {{PROJECT}} $project
}

dash-or-underscore-char () {
    local project=$1
    case "$project" in
        *_*) local char="_" ;;
        *) local char="-" ;;
    esac
    echo -n $char
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-service-project () {
    echo "Setting up starter OTP service project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-service-files $project
    cd $project && git init && git add * .gitignore && make check
}

setup-e2-service-project () {
    #echo "Setting up starter e2 service project ..."
    local project=$1
    not-implemented-error
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    local context=$1
    local arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg=$3

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg
            create-new $context $arg
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@
