#!/bin/bash

version=0.1.2

gitignore="ZGVwcwoqLnN1YmxpbWUtcHJvamVjdAoqLnN1YmxpbWUtd29ya3NwYWNlCiouYmVhbQouZXVuaXQKZGVidWctKgplYmluLyoKYmluL2V4cG0K"
usage="U2NyaXB0OiB7e1NDUklQVH19LCB2e3tWRVJTSU9OfX0KVXNhZ2U6IHt7RlVMTFBBVEh9fSA8Y29tbWFuZD4gPGNvbnRleHQ+IDxhcmc+IHwgPG9wdGlvbnM+CgpDdXJyZW50bHksIHt7U0NSSVBUfX0gc3VwcG9ydHMgdGhlc2UgY29tbWFuZHM6CiAqIGhlbHAKICogdmVyc2lvbgogKiBpbnN0YWxsCiAqIHVwZGF0ZQogKiBuZXcKCkFkZGl0aW9uYWxseSwgaW5zdGVhZCBvZiBwYXNzaW5nIGEgY29tbWFuZCwgeW91IG1heSBjaG9vc2UgdG8gcnVuIHRoZSBzY3JpcHQKd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgogLWggICAgZGlzcGxheSB0aGlzIHVzYWdlIG1lc3NhZ2UgYW5kIGV4aXQKIC12ICAgIGRpc3BsYXkgdGhlIHZlcnNpb24gbnVtYmVyIGFuZCBleGl0CgpUaGVzZSBjb21tYW5kcyBhcmUgZG9jdW1lbnRlZCBvbiB0aGUgcHJvamVjdCBwYWdlIGhlcmU6CiAgaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV0b29sCg=="
rebarconfig="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QiXX1dfS4Ke2xmZV9maXJzdF9maWxlcywgW119Lgp7ZGVwc19kaXIsIFsiZGVwcyJdfS4Ke3BsdWdpbnMsIFsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nXX0uCntldW5pdF9jb21waWxlX29wdHMsIFsKICAge3NyY19kaXJzLCBbInRlc3QiLCAic3JjIl19CiAgXX0uCntkZXBzLCBbCiAgIHtsZmUsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZS5naXQiLCAiZGV2ZWxvcCJ9fSwKICAgeydsZmUtdXRpbHMnLCAiLioiLCB7Z2l0LCAiaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmUtdXRpbHMuZ2l0IiwgIm1hc3RlciJ9fSwKICAge2xmZXVuaXQsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL2xmZS9sZmV1bml0LmdpdCIsICJtYXN0ZXIifX0sCiAgIHsnbGZlLXNhbXBsZS1yZWJhci1wbHVnaW4nLAogICAgICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL291Yml3YW5uL2xmZS1zYW1wbGUtcmViYXItcGx1Z2luLmdpdCIsCiAgICAgIm1hc3RlciJ9fQogIF19Lgo="
package="RXhwbS5QYWNrYWdlLm5ldygKICBuYW1lOiAie3tQUk9KRUNUfX0iLAogIGRlc2NyaXB0aW9uOiAie3tQUk9KRUNUfX0gREVTQ1JJUFRJT04iLAogIHZlcnNpb246ICIwLjAuMSIsCiAga2V5d29yZHM6IFsiTEZFIiwgIkxpc3AiLCAiTGlicmFyeSIsICJBUEkiXSwKICBtYWludGFpbmVyczogW1tuYW1lOiAiWU9VUiBOQU1FIiwgZW1haWw6ICJZT1VSQEVNQUlMLmNvbSJdXSwKICByZXBvc2l0b3JpZXM6IFtbZ2l0aHViOiAiWU9VUl9HSVRIVUJfTkFNRS97e1BST0pFQ1R9fV1dKQo="
commonmk="UFJPSkVDVCA9IHt7UFJPSkVDVH19CkxJQiA9IHt7UFJPSkVDVH19CkRFUFMgPSAuL2RlcHMKQklOX0RJUiA9IC4vYmluCkVYUE0gPSAkKEJJTl9ESVIpL2V4cG0KTEZFX0RJUiA9ICQoREVQUykvbGZlCkxGRV9FQklOID0gJChMRkVfRElSKS9lYmluCkxGRSA9ICQoTEZFX0RJUikvYmluL2xmZQpMRkVDID0gJChMRkVfRElSKS9iaW4vbGZlYwpMRkVfVVRJTFNfRElSID0gJChERVBTKS9sZmUtdXRpbHMKTEZFVU5JVF9ESVIgPSAkKERFUFMpL2xmZXVuaXQKU09VUkNFX0RJUiA9IC4vc3JjCk9VVF9ESVIgPSAuL2ViaW4KVEVTVF9ESVIgPSAuL3Rlc3QKVEVTVF9PVVRfRElSID0gLi8uZXVuaXQKRklOSVNIID0gLXJ1biBpbml0IHN0b3AgLW5vc2hlbGwKIyBOb3RlIHRoYXQgRVJMX0xJQlMgaXMgZm9yIHJ1bm5pbmcgdGhpcyBwcm9qZWN0IGluIGRldmVsb3BtZW50IGFuZCB0aGF0CiMgRVJMX0xJQiBpcyBmb3IgaW5zdGFsbGF0aW9uLgpFUkxfTElCUyA9ICQoc2hlbGwgZmluZCAkKERFUFMpIC1tYXhkZXB0aCAxIC1leGVjIGVjaG8gLW4gJ3t9OicgXDt8c2VkICdzLzokJC86Li8nKTokKFRFU1RfT1VUX0RJUikKCmdldC12ZXJzaW9uOgoJQGVjaG8KCUBlY2hvICJHZXR0aW5nIHZlcnNpb24gaW5mbyAuLi4iCglAZWNobwoJQGVjaG8gLW4gYXBwLnNyYzogJycKCUBlcmwgLWV2YWwgJ2lvOmZvcm1hdCgifnB+biIsIFsgXAoJCXByb3BsaXN0czpnZXRfdmFsdWUodnNuLGVsZW1lbnQoMyxlbGVtZW50KDIsaGQoZWxlbWVudCgzLCBcCgkJZXJsX2V2YWw6ZXhwcnMoZWxlbWVudCgyLCBlcmxfcGFyc2U6cGFyc2VfZXhwcnMoZWxlbWVudCgyLCBcCgkJZXJsX3NjYW46c3RyaW5nKCJEYXRhID0gIiArKyBiaW5hcnlfdG9fbGlzdChlbGVtZW50KDIsIFwKCQlmaWxlOnJlYWRfZmlsZSgic3JjLyQoTElCKS5hcHAuc3JjIikpKSkpKSksIFtdKSkpKSkpXSknIFwKCQkkKEZJTklTSCkKCUBlY2hvIC1uIHBhY2thZ2UuZXhzOiAnJwoJQGdyZXAgdmVyc2lvbiBwYWNrYWdlLmV4cyB8YXdrICd7cHJpbnQgJCQyfSd8c2VkIC1lICdzLywvL2cnCglAZWNobyAtbiBnaXQgdGFnczogJycKCUBlY2hvIGBnaXQgdGFnYAoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICQgRVJMX0xJQj1zb21lL3BhdGggbWFrZSBnZXQtaW5zdGFsbC1kaXIKIwojIFdoaWNoIHdvdWxkIGdpdmUgdGhlIGZvbGxvd2luZyByZXN1bHQ6CiMgICBzb21lL3BhdGgvJHByb2plY3QtMS4wLjAKIwpnZXQtaW5zdGFsbC1kaXI6CglAZWNobyAkKEVSTF9MSUIpLyQoUFJPSkVDVCktJChzaGVsbCBtYWtlIGdldC12ZXJzaW9uKQoKJChCSU5fRElSKToKCW1rZGlyIC1wICQoQklOX0RJUikKCiQoRVhQTSk6ICQoQklOX0RJUikKCWN1cmwgLW8gJChFWFBNKSBodHRwOi8vZXhwbS5jby9fX2Rvd25sb2FkX18vZXhwbQoJY2htb2QgK3ggJChFWFBNKQoKZ2V0LWRlcHM6CglAZWNobyAiR2V0dGluZyBkZXBlbmRlbmNpZXMgLi4uIgoJQHJlYmFyIGdldC1kZXBzCglAZm9yIERJUiBpbiAkKHdpbGRjYXJkICQoREVQUykvKik7IFwKCWRvIGNkICQkRElSOyBlY2hvICJVcGRhdGluZyAkJERJUiAuLi4iOyBcCglnaXQgcHVsbDsgY2QgLSA+IC9kZXYvbnVsbDsgZG9uZQoKY2xlYW4tZWJpbjoKCUBlY2hvICJDbGVhbmluZyBlYmluIGRpciAuLi4iCglAcm0gLWYgJChPVVRfRElSKS8qLmJlYW0KCmNsZWFuLWV1bml0OgoJQGVjaG8gIkNsZWFuaW5nIGV1bml0IGRpciAuLi4iCglAcm0gLXJmICQoVEVTVF9PVVRfRElSKQoKY29tcGlsZTogZ2V0LWRlcHMgY2xlYW4tZWJpbgoJQGVjaG8gIkNvbXBpbGluZyBwcm9qZWN0IGNvZGUgYW5kIGRlcGVuZGVuY2llcyAuLi4iCglAcmViYXIgY29tcGlsZQoKY29tcGlsZS1uby1kZXBzOiBjbGVhbi1lYmluCglAZWNobyAiQ29tcGlsaW5nIG9ubHkgcHJvamVjdCBjb2RlIC4uLiIKCUByZWJhciBjb21waWxlIHNraXBfZGVwcz10cnVlCgpjb21waWxlLXRlc3RzOiBjbGVhbi1ldW5pdAoJQGVjaG8gIkNvbXBpbGluZyB0ZXN0cyAuLi4iCglAbWtkaXIgLXAgJChURVNUX09VVF9ESVIpCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKFRFU1RfT1VUX0RJUikgJChURVNUX0RJUikvKltfLV10ZXN0cy5sZmUKCUAtRVJMX0xJQlM9JChFUkxfTElCUykgJChMRkVDKSAtbyAkKE9VVF9ESVIpICQoVEVTVF9ESVIpL3Rlc3RpbmdbLV9dKi5sZmUKCnNoZWxsOiBjb21waWxlCglAY2xlYXIKCUBlY2hvICJTdGFydGluZyBzaGVsbCAuLi4iCglARVJMX0xJQlM9JChFUkxfTElCUykgJChMRkUpIC1wYSAkKFRFU1RfT1VUX0RJUikKCnNoZWxsLW5vLWRlcHM6IGNvbXBpbGUtbm8tZGVwcwoJQGNsZWFyCglAZWNobyAiU3RhcnRpbmcgc2hlbGwgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtcGEgJChURVNUX09VVF9ESVIpCgpjbGVhbjogY2xlYW4tZWJpbiBjbGVhbi1ldW5pdAoJQHJlYmFyIGNsZWFuCgpjaGVjazogY29tcGlsZSBjb21waWxlLXRlc3RzCglAY2xlYXIKCUBlY2hvICJSdW5uaW5nIHVuaXQgdGVzdHMgLi4uIgoJQHJlYmFyIGV1bml0IHZlcmJvc2U9MSBza2lwX2RlcHM9dHJ1ZQoKY2hlY2stdHJhdmlzOiBjb21waWxlIGNvbXBpbGUtdGVzdHMKCUBlY2hvICJCdWlsZGluZyBhbmQgcnVubmluZyB1bml0IHRlc3RzIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSBlcmwgLXBhIC5ldW5pdCAtbm9zaGVsbCBcCgktZXZhbCAiZXVuaXQ6dGVzdCh7aW5wYXJhbGxlbCxbXAoJCWBscyAuZXVuaXR8IFwKCQlzZWQgLWUgJ3MvLmJlYW0vLyd8IFwKCQlhd2sgJ3twcmludCAiXHgyNyIgJCQxICJceDI3In0nfCBcCgkJc2VkIC1lIDphIC1lIE4gLWUgJ3MvXG4vLC8nYF19LFt2ZXJib3NlXSkiIFwKCS1zIGluaXQgc3RvcAoKY2hlY2stbm8tZGVwczogY29tcGlsZS1uby1kZXBzIGNvbXBpbGUtdGVzdHMKCUBjbGVhcgoJQGVjaG8gIlJ1bm5pbmcgdW5pdCB0ZXN0cyAuLi4iCglAcmViYXIgZXVuaXQgdmVyYm9zZT0xIHNraXBfZGVwcz10cnVlCgpwdXNoLWFsbDoKCUBlY2hvICJQdXNpbmcgY29kZSB0byBnaXRodWIgLi4uIgoJZ2l0IHB1c2ggLS1hbGwKCWdpdCBwdXNoIHVwc3RyZWFtIC0tYWxsCglnaXQgcHVzaCAtLXRhZ3MKCWdpdCBwdXNoIHVwc3RyZWFtIC0tdGFncwoKIyBOb3RlIHRoYXQgdGhpcyBtYWtlIHRhcmdldCBleHBlY3RzIHRvIGJlIHVzZWQgbGlrZSBzbzoKIyAgICAkIEVSTF9MSUI9c29tZS9wYXRoIG1ha2UgaW5zdGFsbAojCmluc3RhbGw6IElOU1RBTExESVI9JChzaGVsbCBtYWtlIGdldC1pbnN0YWxsLWRpcikKaW5zdGFsbDogY29tcGlsZQoJQGVjaG8gIkluc3RhbGxpbmcge3tQUk9KRUNUfX0gLi4uIgoJQGlmIFsgIiQkRVJMX0xJQiIgIT0gIiIgXTsgXAoJdGhlbiBta2RpciAtcCAkKElOU1RBTExESVIpLyQoRUJJTik7IFwKCQlta2RpciAtcCAkKElOU1RBTExESVIpLyQoU1JDKTsgXAoJCWNwIC1wUFIgJChFQklOKSAkKElOU1RBTExESVIpOyBcCgkJY3AgLXBQUiAkKFNSQykgJChJTlNUQUxMRElSKTsgXAoJZWxzZSBcCgkJZWNobyAiRVJST1I6IE5vICdFUkxfTElCJyB2YWx1ZSBpcyBzZXQgaW4gdGhlIGVudi4iIFwKCQkmJiBleGl0IDE7IFwKCWZpCgp1cGxvYWQ6ICQoRVhQTSkgZ2V0LXZlcnNpb24KCUBlY2hvICJQcmVwYXJpbmcgdG8gdXBsb2FkIHt7UFJPSkVDVH19IC4uLiIKCUBlY2hvCglAZWNobyAiUGFja2FnZSBmaWxlOiIKCUBlY2hvCglAY2F0IHBhY2thZ2UuZXhzCglAZWNobwoJQGVjaG8gIkNvbnRpbnVlIHdpdGggdXBsb2FkPyAiCglAcmVhZAoJJChFWFBNKSBwdWJsaXNoCg=="
otpmk="aW5jbHVkZSBjb21tb24ubWsKCnJ1bjoKCUBlY2hvICJSdW5uaW5nIE9UUCBhcHAgaW4gdGhlIGZvcmVncm91bmQgLi4uIgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoTEZFKSAtZXZhbCAiYXBwbGljYXRpb246c3RhcnQoJ3t7UFJPSkVDVH19JykiCgpkYWVtb246CglAZWNobyAiUnVubmluZyBPVFAgYXBwIGluIHRoZSBiYWNrZ3JvdW5kIC4uLiIKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKExGRSkgXAoJLWV2YWwgImFwcGxpY2F0aW9uOnN0YXJ0KCd7e1BST0pFQ1R9fScpIiAtZGV0YWNoZWQgLW5vc2hlbGwK"
yawsmk="aW5jbHVkZSBjb21tb24ubWsKCkVUQ19ESVIgPSAuL2V0YwpZQVdTX0RJUiA9ICQoREVQUykveWF3cwpZQVdTID0gJChZQVdTX0RJUikvYmluL3lhd3MKWUFXU19DT05GID0gJChFVENfRElSKS95YXdzLmNvbmYKWUFXU19TRVJWRVJfSUQgPSBjaGFuZ2VtZQoKZGV2OiBjb21waWxlLW5vLWRlcHMKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKFlBV1MpIC1pIC0tY29uZiAkKFlBV1NfQ09ORikgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKcnVuOiBjb21waWxlCglARVJMX0xJQlM9JChFUkxfTElCUykgJChZQVdTKSAtRCAtLWhlYXJ0IC0tY29uZiAkKFlBV1NfQ09ORikgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKdXBkYXRlLWNvbmY6CglARVJMX0xJQlM9JChFUkxfTElCUykgJChZQVdTKSAtaCAtLWNvbmYgJChZQVdTX0NPTkYpIC0taWQgJChZQVdTX1NFUlZFUl9JRCkKCnN0YXRzOgoJQEVSTF9MSUJTPSQoRVJMX0xJQlMpICQoWUFXUykgLVMgLS1pZCAkKFlBV1NfU0VSVkVSX0lEKQoKc3RvcDoKCUBFUkxfTElCUz0kKEVSTF9MSUJTKSAkKFlBV1MpIC0tc3RvcCAtLWlkICQoWUFXU19TRVJWRVJfSUQpCg=="
libmakefile="aW5jbHVkZSBjb21tb24ubWsK"
svcmakefile="aW5jbHVkZSBvdHAubWsK"
travisci="bGFuZ3VhZ2U6IGVybGFuZwpzY3JpcHQ6ICJtYWtlIGNoZWNrLXRyYXZpcyIKbm90aWZpY2F0aW9uczoKICAjaXJjOiAiaXJjLmZyZWVub2RlLm9yZyNZT1VSLVBST0pFQ1QtQ0hBTk5FTCIKICByZWNpcGllbnRzOgogICAgIy0gWU9VQFlPVVIuRE9NQUlOCm90cF9yZWxlYXNlOgogIC0gUjE2QjAzCiAgIy0gUjE1QjAzCg=="
readme="IyMjIyMjIyMjIyMKe3tQUk9KRUNUfX0KIyMjIyMjIyMjIyMKCkludHJvZHVjdGlvbgo9PT09PT09PT09PT0KCkFkZCBjb250ZW50IHRvIG1lIGhlcmUhCgpEZXBlbmRlbmNpZXMKLS0tLS0tLS0tLS0tCgpUaGlzIHByb2plY3QgYXNzdW1lcyB0aGF0IHlvdSBoYXZlIGByZWJhcmBfIGluc3RhbGxlZCBzb213aGVyZSBpbiB5b3VyCmBgJFBBVEhgYC4KClRoaXMgcHJvamVjdCBkZXBlbmRzIHVwb24gdGhlIGZvbGxvd2luZywgd2hpY2ggaW5zdGFsbGVkIHRvIHRoZSBgYGRlcHNgYApkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0IHdoZW4geW91IHJ1biBgYG1ha2UgZGVwc2BgOgoKKiBgTEZFYF8gKExpc3AgRmxhdm9yZWQgRXJsYW5nOyBuZWVkZWQgb25seSB0byBjb21waWxlKQoqIGBsZmV1bml0YF8gKG5lZWRlZCBvbmx5IHRvIHJ1biB0aGUgdW5pdCB0ZXN0cykKCkluc3RhbGxhdGlvbgo9PT09PT09PT09PT0KCkp1c3QgYWRkIGl0IHRvIHlvdXIgYGByZWJhci5jb25maWdgYCBkZXBzOgoKYGBgZXJsYW5nCiAgICB7ZGVwcywgWwogICAgICAgIC4uLgogICAgICAgIHt7e1BST0pFQ1R9fSwgIi4qIiwge2dpdCwgImdpdEBnaXRodWIuY29tOllPVVJOQU1FL3t7UFJPSkVDVH19LmdpdCIsICJtYXN0ZXIifX0KICAgICAgXX0uCmBgYAoKQW5kIHRoZW4gZG8gdGhlIHVzdWFsOgoKYGBgYmFzaAoKICAgICQgcmViYXIgZ2V0LWRlcHMKICAgICQgcmViYXIgY29tcGlsZQpgYGAKClVzYWdlCj09PT09CgpBZGQgY29udGVudCB0byBtZSBoZXJlIQoKLi4gTGlua3MKLi4gLS0tLS0KLi4gX3JlYmFyOiBodHRwczovL2dpdGh1Yi5jb20vcmViYXIvcmViYXIKLi4gX0xGRTogaHR0cHM6Ly9naXRodWIuY29tL3J2aXJkaW5nL2xmZQouLiBfbGZldW5pdDogaHR0cHM6Ly9naXRodWIuY29tL2xmZS9sZmV1bml0Cg=="
scriptfile="IyEgL3Vzci9iaW4vZW52IGxmZXNjcmlwdAo7OyAtKi0gbW9kZTogbGZlIC0qLQo7OyEgLXNtcCBlbmFibGUgLXNuYW1lIGZhY3RvcmlhbCAtbW5lc2lhIGRlYnVnIHZlcmJvc2UKKGRlZnVuIG1haW4KICAoKChsaXN0IHN0cmluZykpCiAgICAodHJ5CiAgICAgIChsZXQqICgobiAobGlzdF90b19pbnRlZ2VyIHN0cmluZykpCiAgICAgICAgICAgICAgKGYgKGZhYyBuKSkpCiAgICAgICAgICg6IGxmZV9pbyBmb3JtYXQgJyJmYWN0b3JpYWwgfncgPSB+d1xuIiAobGlzdCBuIGYpKSkKICAgICAgKGNhdGNoCiAgICAgICAgKCh0dXBsZSBfIF8gXykgKHVzYWdlKSkpKSkKICAgICgoXykgKHVzYWdlKSkpCgooZGVmdW4gZmFjCiAgKCgwKSAxKQogICgobikgKCogbiAoZmFjICgtIG4gMSkpKSkpCgooZGVmdW4gdXNhZ2UgKCkKICAobGV0ICgoc2NyaXB0LW5hbWUgKDogZXNjcmlwdCBzY3JpcHRfbmFtZSkpKQogICAgKDogbGZlX2lvIGZvcm1hdCAnInVzYWdlOiB+cyA8aW50ZWdlcj5cbiIgKGxpc3Qgc2NyaXB0LW5hbWUpKSkp"
libappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX0nCiAgIF19LAoKICAlJSBBbGwgb2YgdGhlIHJlZ2lzdGVyZWQgbmFtZXMgdGhlIGFwcGxpY2F0aW9uIHVzZXMuIFRoaXMgY2FuIGJlIGlnbm9yZWQuCiAge3JlZ2lzdGVyZWQsIFtdfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0u"
libtestmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBteS1hZGRlcgogIChpcy1lcXVhbCA0ICg6IHt7UFJPSkVDVH19IG15LWFkZGVyIDIgMikpKQo="
libmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkp"
svcappsrc="JSUgLSotIGVybGFuZyAtKi0Ke2FwcGxpY2F0aW9uLCAne3tQUk9KRUNUfX0nLAogWwogICUlIEEgcXVpY2sgZGVzY3JpcHRpb24gb2YgdGhlIGFwcGxpY2F0aW9uLgogIHtkZXNjcmlwdGlvbiwgIk15IHByb2plY3QgZGVzY3JpcHRpb24uLi4ifSwKCiAgJSUgVGhlIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uCiAge3ZzbiwgIjAuMC4xIn0sCgogICUlIEFsbCBtb2R1bGVzIHVzZWQgYnkgdGhlIGFwcGxpY2F0aW9uLgogIHttb2R1bGVzLAogICBbCiAgICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1hcHAnLAogICAgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyJywKICAgICd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cCcKICAgXX0sCgogICUlIEFsbCBvZiB0aGUgcmVnaXN0ZXJlZCBuYW1lcyB0aGUgYXBwbGljYXRpb24gdXNlcy4gVGhpcyBjYW4gYmUgaWdub3JlZC4KICB7cmVnaXN0ZXJlZCwgWyd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cCddfSwKCiAgJSUgQXBwbGljYXRpb25zIHRoYXQgYXJlIHRvIGJlIHN0YXJ0ZWQgcHJpb3IgdG8gdGhpcyBvbmUuIFRoaXMgY2FuIGJlIGlnbm9yZWQKICAlJSBsZWF2ZSBpdCBhbG9uZSB1bmxlc3MgeW91IHVuZGVyc3RhbmQgaXQgd2VsbCBhbmQgbGV0IHRoZSAucmVsIGZpbGVzIGluCiAgJSUgeW91ciByZWxlYXNlIGhhbmRsZSB0aGlzLgogIHthcHBsaWNhdGlvbnMsCiAgIFsKICAgIGtlcm5lbCwKICAgIHN0ZGxpYgogICBdfSwKCiAgJSUgT1RQIGFwcGxpY2F0aW9uIGxvYWRlciB3aWxsIGxvYWQsIGJ1dCBub3Qgc3RhcnQsIGluY2x1ZGVkIGFwcHMuIEFnYWluCiAgJSUgdGhpcyBjYW4gYmUgaWdub3JlZCBhcyB3ZWxsLiAgVG8gbG9hZCBidXQgbm90IHN0YXJ0IGFuIGFwcGxpY2F0aW9uIGl0CiAgJSUgaXMgZWFzaWVyIHRvIGluY2x1ZGUgaXQgaW4gdGhlIC5yZWwgZmlsZSBmb2xsb3dlZCBieSB0aGUgYXRvbSAnbm9uZScKICB7aW5jbHVkZWRfYXBwbGljYXRpb25zLCBbXX0sCgogICUlCiAge21vZCwgeyd7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fWFwcCcsIFtdfX0sCgogICUlIGNvbmZpZ3VyYXRpb24gcGFyYW1ldGVycyBzaW1pbGFyIHRvIHRob3NlIGluIHRoZSBjb25maWcgZmlsZSBzcGVjaWZpZWQKICAlJSBvbiB0aGUgY29tbWFuZCBsaW5lLiBjYW4gYmUgZmV0Y2hlZCB3aXRoIGdhczpnZXRfZW52CiAge2VudiwgW119CiBdCn0uCg=="
svctestmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXRlc3RzCiAgKGV4cG9ydCBhbGwpCiAgKGltcG9ydAogICAgKGZyb20gbGZldW5pdC11dGlsCiAgICAgIChjaGVjay1mYWlsZWQtYXNzZXJ0IDIpCiAgICAgIChjaGVjay13cm9uZy1hc3NlcnQtZXhjZXB0aW9uIDIpKSkpCgooaW5jbHVkZS1saWIgImRlcHMvbGZldW5pdC9pbmNsdWRlL2xmZXVuaXQtbWFjcm9zLmxmZSIpCgooZGVmdGVzdCBjb2RlLWNoYW5nZQogIChpcy1lcXVhbAogICAgOzsgWFhYIFRoaXMgdW5pdCB0ZXN0IGZhaWxzIGJ5IGRlZmF1bHQgLS0gZml4IGl0IQogICAgIyhvayAiZGF0YSIpCiAgICAoOiB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXNlcnZlciBjb2RlX2NoYW5nZQogICAgICAgJyJvbGQgdmVyc2lvbiIKICAgICAgICcic3RhdGUiCiAgICAgICAnImV4dHJhIikpKQo="
svcapp="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fWFwcAogIChiZWhhdmlvdXIgYXBwbGljYXRpb24pCiAgKGV4cG9ydCAoc3RhcnQgMikKICAgICAgICAgIChzdG9wIDEpKSkKCihkZWZ1biBzdGFydCAodHlwZSBhcmdzKQogIChsZXQgKChyZXN1bHQgKDoge3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zdXAgc3RhcnRfbGluaykpKQogICAgKGNhc2UgcmVzdWx0CiAgICAgICgodHVwbGUgJ29rIHBpZCkKICAgICAgICByZXN1bHQpCiAgICAgIChfCiAgICAgICAgKHR1cGxlICdlcnJvciByZXN1bHQpKSkpKQoKKGRlZnVuIHN0b3AgKHN0YXRlKQogICdvaykK"
svcserver="Ozs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OzsgQGF1dGhvciAgWU9VUiBOQU1FLCA8WU9VUiBFTUFJTD4KOzs7IEBjb3B5cmlnaHQgKEMpIFlFQVIsCjs7OyBAZG9jCjs7OyAgICAgWU9VUiBQUk9KRUNUIGFwcGxpY2F0aW9uIHNlcnZlcgo7OzsgQGVuZAo7OzsgQ3JlYXRlZCA6IFRPREFZIGJ5IFlPVVIgRU1BSUwKOzs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmbW9kdWxlIHt7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyCiAgKGJlaGF2aW91ciBnZW5fc2VydmVyKQogIDs7IEFQSQogIChleHBvcnQgKHN0YXJ0X2xpbmsgMCkKICAgICAgICAgICh0ZXN0LWNhbGwgMSkKICAgICAgICAgICh0ZXN0LWNhc3QgMSkpCiAgOzsgZ2VuX3NlcnZlciBjYWxsYmFja3MKICAoZXhwb3J0IChpbml0IDEpCiAgICAgICAgICAoaGFuZGxlX2NhbGwgMykKICAgICAgICAgIChoYW5kbGVfY2FzdCAyKQogICAgICAgICAgKGhhbmRsZV9pbmZvIDIpCiAgICAgICAgICAodGVybWluYXRlIDIpCiAgICAgICAgICAoY29kZV9jaGFuZ2UgMykpKQoKKGRlZnJlY29yZCBzdGF0ZQogIChkYXRhICh0dXBsZSkpKQoKKGRlZnVuIHNlcnZlci1uYW1lICgpCiAgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyKQoKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQo7OzsgQVBJCjs7Oz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQGRvYwo7OyBTdGFydHMgdGhlIHNlcnZlcgo7Owo7OyBAc3BlYyBzdGFydF9saW5rKCkgLT4ge29rLCBQaWR9IHwgaWdub3JlIHwge2Vycm9yLCBFcnJvcn0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBzdGFydF9saW5rICgpCiAgKDogZ2VuX3NlcnZlciBzdGFydF9saW5rCiAgICAgKHR1cGxlICdsb2NhbCAoc2VydmVyLW5hbWUpKSAoTU9EVUxFKSAnKCkgJygpKSkKCihkZWZ1biB0ZXN0LWNhbGwgKG1lc3NhZ2UpCiAgKDogZ2VuX3NlcnZlciBjYWxsCiAgICAgKHNlcnZlci1uYW1lKSAodHVwbGUgJ3Rlc3QgbWVzc2FnZSkpKQoKKGRlZnVuIHRlc3QtY2FzdCAobWVzc2FnZSkKICAoOiBnZW5fc2VydmVyIGNhc3QKICAgICAoc2VydmVyLW5hbWUpICh0dXBsZSAndGVzdCBtZXNzYWdlKSkpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBnZW5fc2VydmVyIGNhbGxiYWNrcwo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgSW5pdGlhbGl6ZXMgdGhlIHNlcnZlcgo7Owo7OyBAc3BlYyBpbml0KEFyZ3MpIC0+IHtvaywgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICB7b2ssIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgaWdub3JlIHwKOzsgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29ufQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGluaXQgKGFyZ3MpCiAgKHR1cGxlICdvayAobWFrZS1zdGF0ZSkpKQoKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBIYW5kbGluZyBjYWxsIG1lc3NhZ2VzCjs7Cjs7IEBzcGVjIGhhbmRsZV9jYWxsKFJlcXVlc3QsIEZyb20sIFN0YXRlKSAtPgo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlcGx5LCBSZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXBseSwgUmVwbHksIFN0YXRlLCBUaW1lb3V0fSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bm9yZXBseSwgU3RhdGV9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3N0b3AsIFJlYXNvbiwgUmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBoYW5kbGVfY2FsbAogICgoKHR1cGxlICd0ZXN0IG1lc3NhZ2UpIGZyb20gc3RhdGUpCiAgICAoOiBsZmVfaW8gZm9ybWF0ICciQ2FsbDogfnB+biIgKGxpc3QgbWVzc2FnZSkpCiAgICAodHVwbGUgJ3JlcGx5ICdvayBzdGF0ZSkpCiAgKChyZXF1ZXN0IGZyb20gc3RhdGUpCiAgICAodHVwbGUgJ3JlcGx5ICdvayBzdGF0ZSkpKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IEhhbmRsaW5nIGNhc3QgbWVzc2FnZXMKOzsKOzsgQHNwZWMgaGFuZGxlX2Nhc3QoTXNnLCBTdGF0ZSkgLT4ge25vcmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtub3JlcGx5LCBTdGF0ZSwgVGltZW91dH0gfAo7OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c3RvcCwgUmVhc29uLCBTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBoYW5kbGVfY2FzdAogICgoKHR1cGxlICd0ZXN0IG1lc3NhZ2UpIHN0YXRlKQogICAgKDogbGZlX2lvIGZvcm1hdCAnIkNhc3Q6IH5wfm4iIChsaXN0IG1lc3NhZ2UpKQogICAgKHR1cGxlICdub3JlcGx5IHN0YXRlKSkKICAoKG1lc3NhZ2Ugc3RhdGUpCiAgICAodHVwbGUgJ25vcmVwbHkgc3RhdGUpKSkKCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KOzsgQHByaXZhdGUKOzsgQGRvYwo7OyBIYW5kbGluZyBhbGwgbm9uIGNhbGwvY2FzdCBtZXNzYWdlcwo7Owo7OyBAc3BlYyBoYW5kbGVfaW5mbyhJbmZvLCBTdGF0ZSkgLT4ge25vcmVwbHksIFN0YXRlfSB8Cjs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7bm9yZXBseSwgU3RhdGUsIFRpbWVvdXR9IHwKOzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzdG9wLCBSZWFzb24sIFN0YXRlfQo7OyBAZW5kCjs7LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KKGRlZnVuIGhhbmRsZV9pbmZvIChpbmZvIHN0YXRlKQogICh0dXBsZSAnbm9yZXBseSBzdGF0ZSkpCgo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCjs7IEBwcml2YXRlCjs7IEBkb2MKOzsgVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgYnkgYSBnZW5fc2VydmVyIHdoZW4gaXQgaXMgYWJvdXQgdG8KOzsgdGVybWluYXRlLiBJdCBzaG91bGQgYmUgdGhlIG9wcG9zaXRlIG9mIE1vZHVsZTppbml0LzEgYW5kIGRvIGFueQo7OyBuZWNlc3NhcnkgY2xlYW5pbmcgdXAuIFdoZW4gaXQgcmV0dXJucywgdGhlIGdlbl9zZXJ2ZXIgdGVybWluYXRlcwo7OyB3aXRoIFJlYXNvbi4gVGhlIHJldHVybiB2YWx1ZSBpcyBpZ25vcmVkLgo7Owo7OyBAc3BlYyB0ZXJtaW5hdGUoUmVhc29uLCBTdGF0ZSkgLT4gdm9pZCgpCjs7IEBlbmQKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQooZGVmdW4gdGVybWluYXRlIChyZWFzb24gc3RhdGUpCiAgJ29rKQoKOzstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQo7OyBAcHJpdmF0ZQo7OyBAZG9jCjs7IENvbnZlcnQgcHJvY2VzcyBzdGF0ZSB3aGVuIGNvZGUgaXMgY2hhbmdlZAo7Owo7OyBAc3BlYyBjb2RlX2NoYW5nZShPbGRWc24sIFN0YXRlLCBFeHRyYSkgLT4ge29rLCBOZXdTdGF0ZX0KOzsgQGVuZAo7Oy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCihkZWZ1biBjb2RlX2NoYW5nZSAob2xkLXZlcnNpb24gc3RhdGUgZXh0cmEpCiAgKHR1cGxlICdvayBzdGF0ZSkpCgo7Ozs9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Cjs7OyBJbnRlcm5hbCBmdW5jdGlvbnMKOzs7PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQo="
svcsup="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fXt7Sk9JTkNIQVJ9fXN1cAogIChiZWhhdmlvdXIgc3VwZXJ2aXNvcikKICA7OyBBUEkKICAoZXhwb3J0IChzdGFydF9saW5rIDApKQogIDs7IFN1cGVydmlzb3IgY2FsbGJhY2tzCiAgKGV4cG9ydCAoaW5pdCAxKSkpCgooZGVmdW4gc2VydmVyLW5hbWUgKCkKICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zdXApCgooZGVmdW4gc3RhcnRfbGluayAoKQogICg6IHN1cGVydmlzb3Igc3RhcnRfbGluawogICAgKHR1cGxlICdsb2NhbCAoc2VydmVyLW5hbWUpKSAoTU9EVUxFKSAnKCkpKQoKKGRlZnVuIGluaXQgKGFyZ3MpCiAgKGxldCogKChzZXJ2ZXIgKHR1cGxlCiAgICAgICAgICAgICAgICAgICAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zZXJ2ZXIKICAgICAgICAgICAgICAgICAgICh0dXBsZSAne3tQUk9KRUNUfX17e0pPSU5DSEFSfX1zZXJ2ZXIgJ3N0YXJ0X2xpbmsgJygpKQogICAgICAgICAgICAgICAgICAgJ3Blcm1hbmVudAogICAgICAgICAgICAgICAgICAgMjAwMAogICAgICAgICAgICAgICAgICAgJ3dvcmtlcgogICAgICAgICAgICAgICAgICAgKGxpc3QgJ3t7UFJPSkVDVH19e3tKT0lOQ0hBUn19c2VydmVyKQogICAgICAgICAgICAgICAgICAgKSkKICAgICAgICAgKGNoaWxkcmVuIChsaXN0IHNlcnZlcikpCiAgICAgICAgIChyZXN0YXJ0LXN0cmF0ZWd5ICh0dXBsZSAnb25lX2Zvcl9vbmUgMyAxKSkpCiAgICAodHVwbGUgJ29rICh0dXBsZSByZXN0YXJ0LXN0cmF0ZWd5IGNoaWxkcmVuKSkpKQo="
yawsmakefile="aW5jbHVkZSB5YXdzLm1rCg=="
yawsrebar="e2VybF9vcHRzLCBbZGVidWdfaW5mbywge3NyY19kaXJzLCBbInRlc3QiXX1dfS4Ke2xmZV9maXJzdF9maWxlcywgW119Lgp7ZGVwc19kaXIsIFsiZGVwcyJdfS4Ke2V1bml0X2NvbXBpbGVfb3B0cywgWwogICB7c3JjX2RpcnMsIFsidGVzdCIsICJzcmMiXX0KICBdfS4Ke2RlcHMsIFsKICAge2xmZSwgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vcnZpcmRpbmcvbGZlLmdpdCIsICJkZXZlbG9wIn19LAogICB7J2xmZS11dGlscycsICIuKiIsIHtnaXQsICJodHRwczovL2dpdGh1Yi5jb20vbGZlL2xmZS11dGlscy5naXQiLCAibWFzdGVyIn19LAogICB7bGZldW5pdCwgIi4qIiwge2dpdCwgImdpdDovL2dpdGh1Yi5jb20vbGZlL2xmZXVuaXQuZ2l0IiwgIm1hc3RlciJ9fSwKICAge2V4ZW1wbGFyLCAiLioiLCB7Z2l0LCAiZ2l0Oi8vZ2l0aHViLmNvbS9sZmUvZXhlbXBsYXIuZ2l0IiwgIm1hc3RlciJ9fSwKICAge3lhd3MsICIuKiIsIHtnaXQsICJnaXQ6Ly9naXRodWIuY29tL2tsYWNrZS95YXdzLmdpdCIsICJtYXN0ZXIifX0KICBdfS4K"
yawsconf="bG9nZGlyID0gbG9ncwplYmluX2RpciA9IGRlcHMveWF3cy92YXIveWF3cy9lYmluCmViaW5fZGlyID0gZWJpbgpsb2dfcmVzb2x2ZV9ob3N0bmFtZSA9IGZhbHNlCmZhaWxfb25fYmluZF9lcnIgPSB0cnVlCgo8c2VydmVyIGxvY2FsaG9zdD4KICAgICAgICBwb3J0ID0gNTA5OQogICAgICAgIGxpc3RlbiA9IDAuMC4wLjAKICAgICAgICBhcHBtb2RzID0gPC8sIHt7UFJPSkVDVH19PgogICAgICAgIGRvY3Jvb3QgPSB3d3cKPC9zZXJ2ZXI+Cg=="
yawsmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fQogIChleHBvcnQgYWxsKSkKCihkZWZ1biBteS1hZGRlciAoeCB5KQogICgrIHggKCsgeSAxKSkpCgooZGVmdW4gb3V0IChhcmctZGF0YSkKICAiVGhpcyBmdW5jdGlvbiBpcyBleGVjdXRlZCBieSBZQVdTLiBJdCBpcyB0aGUgWUFXUyBlbnRyeSBwb2ludCBmb3Igb3VyIGFwcC4iCiAgKGxldCAoKHJhdy1wYXRoLWluZm8gKDoge3tQUk9KRUNUfX0tdXRpbCBwYXJzZS1wYXRoIGFyZy1kYXRhKSkpCiAgICAoaWYgKD09IHJhdy1wYXRoLWluZm8gJ3VuZGVmaW5lZCkKICAgICAgKDoge3tQUk9KRUNUfX0tcm91dGVzIHJvdXRlcyAnKCIiKSBhcmctZGF0YSkKICAgICAgKGxldCAoKHBhdGgtaW5mbyAoOiBzdHJpbmcgdG9rZW5zIHJhdy1wYXRoLWluZm8gJyIvIikpKQogICAgICAgICg6IHt7UFJPSkVDVH19LXJvdXRlcyByb3V0ZXMgcGF0aC1pbmZvIGFyZy1kYXRhKSkpKSkK"
yawsroutesmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1yb3V0ZXMKICAoZXhwb3J0IGFsbCkpCgooaW5jbHVkZS1saWIgImRlcHMvZXhlbXBsYXIvaW5jbHVkZS9odG1sLW1hY3Jvcy5sZmUiKQoKKGRlZnVuIHJvdXRlcwogICIyLWFyaXR5IHJvdXRlcyBmb3Igb3VyIGFwcC4iCiAgOzsgLwogICgoKGxpc3QgJyIiKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgYXJnLWRhdGEpKQogIDs7IC9jb250ZW50LzppZAogICgoKGxpc3QgJyJjb250ZW50IiBpdGVtLWlkKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgaXRlbS1pZCBhcmctZGF0YSkpCiAgOzsgL3JlbGF0aW9uLzp1c2VyaWQvOmFjY291bnRpZAogICgoKGxpc3QgJyJyZWxhdGlvbiIgdXNlci1pZCBhY2NvdW50LWlkKSBhcmctZGF0YSkKICAgICg6IHt7UFJPSkVDVH19LWNvbnRlbnQgZ2V0LWNvbnRlbnQgdXNlci1pZCBhY2NvdW50LWlkIGFyZy1kYXRhKSkKICA7OyBwb3RlbnRpYWxseSBtYW55IG90aGVyIHJvdXRlcwogIDs7CiAgOzsgV2hlbiBub3RoaW5nIG1hdGNoZXMsIGRvIHRoaXMKICAoKHBhdGggYXJnLWRhdGEpCiAgICAoOiBpbyBmb3JtYXQKICAgICAgJyJVbm1hdGNoZWQgcm91dGUhfm4gUGF0aC1pbmZvOiB+cH5uIGFyZy1kYXRhOiB+cH5ufm4iCiAgICAgIChsaXN0IHBhdGggYXJnLWRhdGEpKQogICAgKDoge3tQUk9KRUNUfX0tY29udGVudCBmb3VyLW9oLWZvdXIKICAgICAgKCsrIChzdHJvbmcgJyJVbm1hdGNoZWQgUm91dGU6ICIpICciLyIgKDogc3RyaW5nIGpvaW4gcGF0aCAnIi8iKSkpKSkK"
yawscontentmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS1jb250ZW50CiAgKGV4cG9ydCBhbGwpKQoKKGluY2x1ZGUtbGliICJkZXBzL2V4ZW1wbGFyL2luY2x1ZGUvaHRtbC1tYWNyb3MubGZlIikKCihkZWZ1biBnZXQtY29udGVudCAoYXJnLWRhdGEpCiAgIjEtYXJpdHkgY29udGVudCBBUEkuCgogIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGl0cyBIVE1MIGZyb20gc2NyYXRjaC4iCiAgKDoge3tQUk9KRUNUfX0tdXRpbCBtYWtlLTIwMC1yZXN1bHQKICAgIChodG1sCiAgICAgIChsaXN0CiAgICAgICAgICAoaGVhZAogICAgICAgICAgICAodGl0bGUgJyJNYWluIFBhZ2UiKSkKICAgICAgICAgIChib2R5CiAgICAgICAgICAgIChtYWluCiAgICAgICAgICAgICAgKGRpdgogICAgICAgICAgICAgICAgKGxpc3QKICAgICAgICAgICAgICAgICAgKGgxICciTWFpbiBQYWdlIikKICAgICAgICAgICAgICAgICAgKGgyICciTGlua3MiKQogICAgICAgICAgICAgICAgICAodWwKICAgICAgICAgICAgICAgICAgICAobGlzdAogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMSIpICciL2NvbnRlbnQvMSIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMiIpICciL2NvbnRlbnQvMiIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2NvbnRlbnQvMyIpICciL2NvbnRlbnQvMyIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpCiAgICAgICAgICAgICAgICAgICAgICAgIChsaXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgKGEgJyhocmVmICIvcmVsYXRpb24vMS8yIikgJyIvcmVsYXRpb24vMS8yIikKICAgICAgICAgICAgICAgICAgICAgICAgICAnIiAoYSB0ZW1wbGF0ZS1iYXNlZCBwYWdlKSIpKQogICAgICAgICAgICAgICAgICAgICAgKGxpIChhICcoaHJlZiAiL2JvYiIpICciNDA0IikpKSkpKSkpKSkpKQoKKGRlZnVuIGdldC1jb250ZW50IChpdGVtLWlkIGFyZy1kYXRhKQogICIyLWFyaXR5IGNvbnRlbnQgQVBJLgoKICBUaGlzIGZ1bmN0aW9uIGdlbmVyYXRlcyBpdHMgSFRNTCBmcm9tIHNjcmF0Y2guIgogIDs7IHdlJ2xsIHByZXRlbnQgdG8gcHVsbCBjb250ZW50IGZyb20gYSBkYXRhIHN0b3JlIGhlcmUgLi4uCiAgKGxldCAoKGZldGNoZWQtdGl0bGUgJyJRdWVyaWVkIFRpdGxlIikKICAgICAgICAoZmV0Y2hlZC1jb250ZW50ICciU29tZSBzdXBlci1ncmVhdCBxdWVyaWVkIGxvcmVtIGlwc3VtLiIpKQogICAgKDoge3tQUk9KRUNUfX0tdXRpbCBtYWtlLTIwMC1yZXN1bHQKICAgICAgKGh0bWwKICAgICAgICAobGlzdAogICAgICAgICAgICAoaGVhZAogICAgICAgICAgICAgICh0aXRsZSBmZXRjaGVkLXRpdGxlKSkKICAgICAgICAgICAgKGJvZHkKICAgICAgICAgICAgICAobWFpbgogICAgICAgICAgICAgICAgKGRpdiAnKGNsYXNzICJkeW5hbWljIGNvbnRlbnQiKQogICAgICAgICAgICAgICAgICAobGlzdAogICAgICAgICAgICAgICAgICAgIChoMSBmZXRjaGVkLXRpdGxlKQogICAgICAgICAgICAgICAgICAgIChoMiAoKysgJyJJdGVtICIgaXRlbS1pZCkpCiAgICAgICAgICAgICAgICAgICAgKGRpdiAocCBmZXRjaGVkLWNvbnRlbnQpKSkpKSkpKSkpKQoKKGRlZnVuIGdldC1jb250ZW50ICh1c2VyLWlkIGFjY291bnQtaWQgYXJnLWRhdGEpCiAgIjMtYXJpdHkgY29udGVudCBBUEkuCgogIFRoaXMgZnVuY3Rpb24gZ2VuZXJhdGVzIGl0cyBIVE1MIGJ5IGNhbGxpbmcgYW5vdGhlciBmdW5jdGlvbi4gVGhpcyBpcyBhbgogIGV4YW1wbGUgb2YgaG93IG9uZSBjb3VsZCBkbyB0ZW1wbGF0aW5nIC0tIGluY2x1ZGluZyBwdXR0aW5nIEhUTUwtZ2VuZXJhdGluZwogIGZ1bmN0aW9ucyBpbiB0aGVpciBvd24gbW9kdWxlcy4iCiAgOzsgd2UnbGwgcHJldGVudCB0byBwdWxsIGNvbnRlbnQgZnJvbSBhIGRhdGEgc3RvcmUgaGVyZSAuLi4KICAobGV0ICgoZmV0Y2hlZC10aXRsZSAnIlF1ZXJpZWQgVGl0bGUiKQogICAgICAgIChmZXRjaGVkLWNvbnRlbnQgJyJTb21lIHN1cGVyLWdyZWF0IHF1ZXJpZWQgbG9yZW0gaXBzdW0uIikpCiAgICAoOiB7e1BST0pFQ1R9fS11dGlsIG1ha2UtMjAwLXJlc3VsdAogICAgICAoYmFzZS1wYWdlCiAgICAgICAgZmV0Y2hlZC10aXRsZQogICAgICAgIChkaXYgJyhjbGFzcyAiZHluYW1pYyBjb250ZW50IikKICAgICAgICAgIChsaXN0CiAgICAgICAgICAgIChoMSBmZXRjaGVkLXRpdGxlKQogICAgICAgICAgICAoaDIgKCsrICciUmVsYXRpb246ICIKICAgICAgICAgICAgICAgICAgICB1c2VyLWlkICciICh1c2VyIGlkKSB8ICIKICAgICAgICAgICAgICAgICAgICBhY2NvdW50LWlkICciIChhY2NvdW50IGlkKSIpKQogICAgICAgICAgICAoZGl2IChwIGZldGNoZWQtY29udGVudCkpKSkpKSkpCgooZGVmdW4gYmFzZS1wYWdlICh0aXRsZSByZW1haW5pbmcpCiAgIldlIGNhbiBhbHNvIG1ha2UgYnVpbGRpbmcgSFRNTCBlYXNpZXIgYnkgdXNpbmcgZnVuY3Rpb25zLiIKICAoaHRtbAogICAgKGxpc3QKICAgICAgKGhlYWQKICAgICAgICAodGl0bGUgdGl0bGUpKQogICAgICAoYm9keQogICAgICAgIChtYWluIHJlbWFpbmluZykpKSkpCgooZGVmdW4gZm91ci1vaC1mb3VyIChtZXNzYWdlKQogICJDdXN0b20gNDA0IHBhZ2UuIgogICAgKDogeWF3cy0xLXV0aWwgbWFrZS00MDQtcmVzdWx0CiAgICAgIChiYXNlLXBhZ2UgJyI0MDQiCiAgICAgICAgKGRpdgogICAgICAgICAgKGxpc3QKICAgICAgICAgICAgKGgxICciNDA0IC0gTm90IEZvdW5kIikKICAgICAgICAgICAgKGRpdiAocCBtZXNzYWdlKSkpKSkpKQoKCgoK"
yawsutilmodule="KGRlZm1vZHVsZSB7e1BST0pFQ1R9fS11dGlsCiAgKGV4cG9ydCBhbGwpKQoKKGluY2x1ZGUtbGliICJkZXBzL3lhd3MvaW5jbHVkZS95YXdzX2FwaS5ocmwiKQoKKGRlZnVuIHBhcnNlLXBhdGggKGFyZy1kYXRhKQogICJHZXQgcGF0aGluZm8uIFRoaXMgaXMgdXNlZCBhcyB0aGUga2V5IHRvIHJlZmVyIHRvIHNwZWNpZmljIHByZWZlcmVuY2VzLgoKICBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB1c2VzIG1hY3JvcyBnZW5lcmF0ZWQgYnkgTEZFIHdoZW4gdGhlaCB5YXdzX2FwaS5ocmwKICBmaWxlIGlzIHBhcnNlZC4iCiAgKGFyZy1wYXRoaW5mbyBhcmctZGF0YSkpCgooZGVmdW4gbWFrZS1yZXN1bHQgKHBheWxvYWQpCiAgKG1ha2UtcmVzdWx0IDIwMCBwYXlsb2FkKSkKCihkZWZ1biBtYWtlLXJlc3VsdCAoc3RhdHVzLWNvZGUgcGF5bG9hZCkKICBgKCMoc3RhdHVzICxzdGF0dXMtY29kZSkgLHBheWxvYWQpKQoKKGRlZnVuIG1ha2UtcmVzdWx0IChzdGF0dXMtY29kZSBwYXlsb2FkIGhlYWRlcnMpCiAgKCsrIChtYWtlLXJlc3VsdCBzdGF0dXMtY29kZSBwYXlsb2FkKSBoZWFkZXJzKSkKCihkZWZ1biBtYWtlLWh0bWwtcmVzdWx0IChzdGF0dXMtY29kZSBodG1sLWRhdGEpCiAgIlJldHVybiBhbiBIVE1MIHBheWxvYWQgZm9yIHRoZSBnaXZlbiBkYXRhLiIKICBgIyhjb250ZW50ICJ0ZXh0L2h0bWwiICxodG1sLWRhdGEpKQoKKGRlZnVuIG1ha2UtMjAwLXJlc3VsdCAoaHRtbC1kYXRhKQogICJPSy4iCiAgKG1ha2UtaHRtbC1yZXN1bHQgMjAwIGh0bWwtZGF0YSkpCgooZGVmdW4gbWFrZS00MDQtcmVzdWx0IChodG1sLWRhdGEpCiAgIk5PVC1GT1VORC4iCiAgKG1ha2UtaHRtbC1yZXN1bHQgNDA0IGh0bWwtZGF0YSkpCg=="

decode () {
    os=`uname`
    case $os in
        Darwin)
            base64 -D
            ;;
        *)
            base64 -d
            ;;
    esac
}

print-usage () {
    local fullpath=$1
    local version=$2
    local script=`basename $1`
    echo "$usage" | decode | sed \
        -e "s#{{SCRIPT}}#$script#g" \
        -e "s#{{FULLPATH}}#$fullpath#g" \
        -e "s#{{VERSION}}#$version#g"
}

error () {
    local message=$1
    echo
    echo $message
    echo
    print-usage $script
    exit 1
}

unknown-command-error () {
    local command=$1
    error "Unknown command: '$command'";
}

unknown-context-error () {
    local context=$1
    error "Unknown context: '$context'";
}

missing-context-error () {
    error "Error: command requires context"
}

missing-arg-error () {
    error "Error: context requires arg"
}

not-implemented-error () {
    error "Error: not yet implemented"
}

lfetool-not-found-error () {
    error 'Error: could not find `lfetool` on the $PATH'
}

create-dirs () {
    local project=$1
    mkdir -p $project/{src,test}
}

create-yaws-dirs () {
    local project=$1
    mkdir -p $project/{www,etc,logs}
}

create-file () {
    local data=$1
    local filename=$2
    local pattern=$3
    local project=$4
    local joinchar=-
    local joinpattern="{{JOINCHAR}}"
    if [ "$pattern" = "" ]; then
        pattern="{{NOOP}}"
        project="{{NOOP}}"
        joinpattern="{{NOOP}}"
    fi
    echo $data | decode | sed \
        -e "s/$joinpattern/$joinchar/" \
        -e "s/$pattern/$project/" > $filename
}

create-project-files () {
    local project=$1
    create-file "$gitignore" $project/.gitignore
    create-file "$rebarconfig" $project/rebar.config
    create-file "$commonmk" $project/common.mk {{PROJECT}} $project
    create-file "$travisci" $project/.travis.yml {{PROJECT}} $project
    create-file "$readme" $project/README.rst {{PROJECT}} $project
    create-file "$package" $project/package.exs {{PROJECT}} $project
}

create-library-files () {
    local project=$1
    create-file "$libmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$libappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/${project}-tests.lfe {{PROJECT}} $project
    create-file "$libmodule" $project/src/$project.lfe {{PROJECT}} $project
}

create-service-files () {
    local project=$1
    create-file "$otpmk" $project/otp.mk {{PROJECT}} $project
    create-file "$svcmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$svctestmodule" \
        $project/test/${project}-tests.lfe {{PROJECT}} $project
    create-file "$svcapp" \
        $project/src/${project}-app.lfe {{PROJECT}} $project
    create-file "$svcserver" \
        $project/src/${project}-server.lfe {{PROJECT}} $project
    create-file "$svcsup" \
        $project/src/${project}-sup.lfe {{PROJECT}} $project
}

create-yaws-files () {
    local project=$1
    create-file "$yawsmk" $project/yaws.mk {{PROJECT}} $project
    create-file "$yawsmakefile" $project/Makefile {{PROJECT}} $project
    create-file "$yawsrebar" $project/rebar.config
    create-file "$yawsconf" $project/etc/yaws.conf {{PROJECT}} $project
    create-file "$svcappsrc" $project/src/$project.app.src {{PROJECT}} $project
    create-file "$yawsmodule" $project/src/${project}.lfe {{PROJECT}} $project
    create-file "$yawsroutesmodule" \
        $project/src/${project}-routes.lfe {{PROJECT}} $project
    create-file "$yawscontentmodule" \
        $project/src/${project}-content.lfe {{PROJECT}} $project
    create-file "$yawsutilmodule" \
        $project/src/${project}-util.lfe {{PROJECT}} $project
    create-file "$libtestmodule" \
        $project/test/${project}-tests.lfe {{PROJECT}} $project
}

setup-script-project () {
    local script=$1
    create-file "$scriptfile" $script
    chmod 755 $script
}

setup-library-project () {
    echo "Setting up starter library project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-library-files $project
    cd $project && git init && git add * .gitignore .travis.yml && make check
}

setup-service-project () {
    echo "Setting up starter OTP service project ..."
    local project=$1
    create-dirs $project
    create-project-files $project
    create-service-files $project
    cd $project && git init && git add * .gitignore .travis.yml && make check
}

setup-e2-service-project () {
    #echo "Setting up starter e2 service project ..."
    local project=$1
    not-implemented-error
}

setup-yaws-project () {
    echo "Setting up starter YAWS project ..."
    local project=$1
    create-dirs $project
    create-yaws-dirs $project
    create-project-files $project
    create-yaws-files $project
    cd $project && git init && git add * .gitignore .travis.yml && make check
}

check-context () {
    local context=$1
    if [ "$context" = "" ]; then
        missing-context-error
    fi
}

check-arg () {
    local arg=$1
    if [ "$arg" = "" ]; then
        missing-arg-error
    fi
}

create-new () {
    local context=$1
    local arg=$2
    case $context in
        script)
            setup-script-project $arg
            ;;
        library)
            setup-library-project $arg
            ;;
        service)
            setup-service-project $arg
            ;;
        e2service)
            setup-e2-service-project $arg
            ;;
        yaws)
            setup-yaws-project $arg
            ;;
        *)
            unknown-context-error $context
            ;;
    esac
}

install-lfetool () {
    local directory=$1
    local mode=$2
    local path=$directory/lfetool
    curl -o $path https://raw.github.com/lfe/lfetool/master/lfetool
    chmod 755 $path
    if [ "$mode" = "" ]; then
        echo
        echo "Installed lfetool to $path."
    fi
}

update-lfetool () {
    local path=`which lfetool`
    if [ "$path" = "" ]; then
      lfetool-not-found-error
    fi
    local directory=`dirname $path`
    install-lfetool $directory "update"
    echo
    echo "Updated lfetool at $path."
}

run () {
    local script=$0
    local command=$1
    local context=$2
    local arg=$3

    case $command in
        -h)
            echo
            print-usage $script $version
            exit 0
            ;;
        -v)
            echo "$version"
            exit 0
            ;;
        help)
            $script -h
            ;;
        version)
            $script -v
            ;;
        install)
            check-context $context
            install-lfetool $context
            ;;
        new)
            check-context $context
            check-arg $arg
            create-new $context $arg
            exit 0
            ;;
        update)
            update-lfetool
            exit 0
            ;;
        *)
            unknown-command-error $command
            ;;
    esac
}

run $@
